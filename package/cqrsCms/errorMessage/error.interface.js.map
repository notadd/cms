{"version":3,"sources":["cqrsCms/errorMessage/error.interface.ts"],"names":[],"mappings":";;AACA,iDAAsD;AAEtD,sBAA8B,SAAQ,KAAK;IAOvC,YAAY,WAAmB;QAC3B,KAAK,EAAE,CAAC;QAER,MAAM,kBAAkB,GAAG,IAAI,CAAC,yBAAyB,CAAC,WAAW,CAAC,CAAC;QACvE,IAAI,CAAC,kBAAkB,EAAE;YAAE,MAAM,IAAI,KAAK,CAAC,oCAAoC,CAAC,CAAC;SAAE;QAEnF,KAAK,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAChD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;QAClC,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,UAAU,CAAC;QAChD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,CAAC,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;QACpD,IAAI,CAAC,OAAO,GAAG,kBAAkB,CAAC,WAAW,CAAC;IAClD,CAAC;IAQO,yBAAyB,CAAC,WAAmB;QACjD,IAAI,kBAA8C,CAAC;QACnD,MAAM,CAAC,IAAI,CAAC,mCAAoB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACzC,IAAI,GAAG,KAAK,WAAW,EAAE;gBACrB,kBAAkB,GAAG,mCAAoB,CAAE,GAAG,CAAE,CAAC;gBACjD,OAAO,IAAI,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACjB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kBAAkB,EAAE;YACrB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;SACnE;QAED,OAAO,kBAAkB,CAAC;IAC9B,CAAC;CACJ;AA3CD,4CA2CC","file":"error.interface.js","sourcesContent":["import { ErrorInterface } from \"../common/error.interface\";\nimport { ErrorInterfaceConfig } from \"./error.config\";\n\nexport class MessageCodeError extends Error {\n    public messageCode: string;\n\n    public httpStatus: number;\n\n    public errorMessage: string;\n\n    constructor(messageCode: string) {\n        super();\n\n        const errorMessageConfig = this.getMessageFromMessageCode(messageCode);\n        if (!errorMessageConfig) { throw new Error(\"Unable to find message code error.\"); }\n\n        Error.captureStackTrace(this, this.constructor);\n        this.name = this.constructor.name;\n        this.httpStatus = errorMessageConfig.httpStatus;\n        this.messageCode = messageCode;\n        this.errorMessage = errorMessageConfig.errorMessage;\n        this.message = errorMessageConfig.userMessage;\n    }\n\n    /**\n     * @description: Find the error config by the given message code.\n     * @param {string} messageCode\n     *\n     * @return {ErrorInterface}\n     */\n    private getMessageFromMessageCode(messageCode: string): ErrorInterface {\n        let errorMessageConfig: ErrorInterface | undefined;\n        Object.keys(ErrorInterfaceConfig).some(key => {\n            if (key === messageCode) {\n                errorMessageConfig = ErrorInterfaceConfig[ key ];\n                return true;\n            }\n            return false;\n        });\n\n        if (!errorMessageConfig) {\n            throw new Error(\"Unable to find the given message code error.\");\n        }\n\n        return errorMessageConfig;\n    }\n}\n"]}
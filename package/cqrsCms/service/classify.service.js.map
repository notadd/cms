{"version":3,"sources":["cqrsCms/service/classify.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,2CAA2C;AAC3C,6CAAmD;AACnD,qCAAiD;AACjD,+BAAgC;AAChC,gEAA4D;AAC5D,kEAA8D;AAC9D,0DAAsD;AACtD,0EAAsE;AACtE,qEAAmE;AAGnE,IAAa,eAAe,GAA5B;IACI,YACuD,UAAsC,EACvC,aAAwC,EACnC,cAA8C,EACtD,cAAsC;QAHlC,eAAU,GAAV,UAAU,CAA4B;QACvC,kBAAa,GAAb,aAAa,CAA2B;QACnC,mBAAc,GAAd,cAAc,CAAgC;QACtD,mBAAc,GAAd,cAAc,CAAwB;IAEzF,CAAC;IAQK,iBAAiB,CAAC,MAAsB,EAAE,KAAc;;YAC1D,MAAM,UAAU,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YACvE,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,MAAM,WAAW,GAAG,IAAI,gCAAc,EAAE,CAAC;gBACzC,WAAW,CAAC,OAAO,GAAG,SAAS,CAAC;gBAChC,WAAW,CAAC,aAAa,GAAG,GAAG,CAAC;gBAChC,WAAW,CAAC,KAAK,GAAG,GAAG,CAAC;gBACxB,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,UAAU;qBAC3B,kBAAkB,EAAE;qBACpB,MAAM,EAAE;qBACR,IAAI,CAAC,gCAAc,CAAC;qBACpB,MAAM,CAAC,WAAW,CAAC;qBACnB,MAAM,CAAC,IAAI,CAAC;qBACZ,OAAO,EAAE,CAAC;gBACf,MAAM,GAAG,GAAW,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAE,CAAC,CAAE,CAAC;gBACvD,MAAM,IAAI,GAAW,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5D,MAAM,KAAK,GAAW,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aACxC;iBAAM;gBACH,MAAM,WAAW,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,KAAK,CACvF,mCAAmC,EACnC,EAAE,aAAa,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,CAC3C,CAAC,OAAO,EAAE,CAAC;gBAEZ,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,6BAA6B,CAAC,CAAC;iBAAE;gBAC1F,MAAM,cAAc,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEzF,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,IAAI,cAAc,KAAK,IAAI,EAAE;oBACjD,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;iBACjE;gBACD,MAAM,KAAK,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBACnE,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE;oBACxC,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;iBAC9B;qBAAM,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,EAAE;oBAC7B,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;iBACtB;gBACD,MAAM,QAAQ,GAAmB,MAAM,CAAC;gBACxC,MAAM,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC1C;YAED,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC1C,CAAC;KAAA;IAOK,kBAAkB,CAAC,MAA0B,EAAE,KAAc;;YAC/D,MAAM,UAAU,GAA8B,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;YAC/E,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzB,MAAM,WAAW,GAAG,IAAI,wCAAkB,EAAE,CAAC;gBAC7C,WAAW,CAAC,OAAO,GAAG,SAAS,CAAC;gBAChC,WAAW,CAAC,aAAa,GAAG,GAAG,CAAC;gBAChC,WAAW,CAAC,KAAK,GAAG,GAAG,CAAC;gBACxB,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,cAAc;qBAC/B,kBAAkB,EAAE;qBACpB,MAAM,EAAE;qBACR,IAAI,CAAC,wCAAkB,CAAC;qBACxB,MAAM,CAAC,WAAW,CAAC;qBACnB,MAAM,CAAC,IAAI,CAAC;qBACZ,OAAO,EAAE,CAAC;gBACf,MAAM,GAAG,GAAW,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAE,CAAC,CAAE,CAAC;gBACvD,MAAM,IAAI,GAAW,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;gBAC5D,MAAM,KAAK,GAAW,MAAM,CAAC,IAAI,CAAC,CAAC;gBACnC,MAAM,CAAC,OAAO,GAAG,KAAK,CAAC;gBACvB,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;aAC5C;iBAAM;gBACH,MAAM,WAAW,GAA8B,MAAM,IAAI,CAAC,cAAc;qBACnE,kBAAkB,EAAE;qBACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,CAC3C;qBACA,OAAO,EAAE,CAAC;gBAEf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,6BAA6B,CAAC,CAAC;iBAAE;gBAC1F,MAAM,cAAc,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEjG,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,cAAc,KAAK,IAAI,EAAE;oBAC5E,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;iBACjE;gBACD,MAAM,KAAK,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;gBAC3E,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,IAAI,KAAK,KAAK,IAAI,EAAE;oBACxC,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC;iBAC9B;qBAAM,IAAI,MAAM,CAAC,OAAO,KAAK,CAAC,EAAE;oBAC7B,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC;iBACtB;gBACD,MAAM,QAAQ,GAAuB,MAAM,CAAC;gBAC5C,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;aAC9C;YAED,OAAO,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC;QAC3C,CAAC;KAAA;IAOK,iBAAiB,CAAC,MAAsB,EAAE,EAAW;;YAEvD,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAC9E,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;aAAE;YACpF,IAAI,MAAM,CAAC,aAAa,KAAK,QAAQ,CAAC,aAAa,EAAE;gBACjD,MAAM,WAAW,GAA0B,MAAM,IAAI,CAAC,UAAU;qBAC3D,kBAAkB,EAAE;qBACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,MAAM,CAAC,aAAa,EAAE,CAC1C;qBACA,OAAO,EAAE,CAAC;gBAEf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,6BAA6B,CAAC,CAAC;iBAAE;aAC7F;YACD,IAAI,eAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC1B,MAAM,cAAc,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEzF,IAAI,cAAc,KAAK,IAAI,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;iBAAE;aAClG;YACD,MAAM,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAC7B,MAAM,aAAa,GAAmB,MAAM,CAAC;YAC7C,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,aAAa,CAAC,CAAC;YAE3D,OAAO,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC;QACvC,CAAC;KAAA;IAOK,kBAAkB,CAAC,MAA0B,EAAE,EAAW;;YAC5D,MAAM,QAAQ,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACtF,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;aAAE;YACpF,IAAI,MAAM,CAAC,aAAa,KAAK,QAAQ,CAAC,aAAa,EAAE;gBACjD,MAAM,WAAW,GAA8B,MAAM,IAAI,CAAC,cAAc;qBACnE,kBAAkB,EAAE;qBACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,MAAM,CAAC,aAAa,EAAE,CAC1C;qBACA,OAAO,EAAE,CAAC;gBAEf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,6BAA6B,CAAC,CAAC;iBAAE;aAC7F;YACD,IAAI,eAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;gBAC1B,MAAM,cAAc,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAEjG,IAAI,cAAc,KAAK,IAAI,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;iBAAE;aAClG;YACD,MAAM,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAC7B,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC;QACxC,CAAC;KAAA;IAOK,kBAAkB,CAAC,KAAa;;YAClC,MAAM,SAAS,GAAmB,MAAM,IAAI,CAAC,UAAU;iBAClD,kBAAkB,EAAE;iBACpB,KAAK,CACF,aAAa,EACb,EAAE,EAAE,EAAE,KAAK,EAAE,CAChB;iBACA,MAAM,EAAE,CAAC;YACd,IAAI,SAAS,EAAE;gBACX,MAAM,IAAI,GAA0B,MAAM,IAAI,CAAC,UAAU;qBACpD,kBAAkB,EAAE;qBACpB,KAAK,CACF,uBAAuB,EACvB,EAAE,OAAO,EAAE,KAAK,EAAE,CACrB;qBACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;qBACpB,OAAO,EAAE,CAAC;gBACf,MAAM,MAAM,GAA0B,EAAE,CAAC;gBACzC,MAAM,WAAW,GAA0B,MAAM,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBAChF,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC;gBACjC,MAAM,eAAe,GAAmB,SAAS,CAAC;gBAClD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC7B,OAAO,MAAM,CAAC;aACjB;iBAAM;gBACH,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;gBACnE,OAAO,MAAM,CAAC;aACjB;QAEL,CAAC;KAAA;IAMK,mBAAmB,CAAC,KAAa;;YACnC,MAAM,SAAS,GAAuB,MAAM,IAAI,CAAC,cAAc;iBAC1D,kBAAkB,EAAE;iBACpB,KAAK,CACF,aAAa,EACb,EAAE,EAAE,EAAE,KAAK,EAAE,CAChB;iBACA,MAAM,EAAE,CAAC;YACd,IAAI,SAAS,EAAE;gBACX,MAAM,IAAI,GAA8B,MAAM,IAAI,CAAC,cAAc;qBAC5D,kBAAkB,EAAE;qBACpB,KAAK,CACF,kBAAkB,EAClB,EAAE,EAAE,EAAE,KAAK,EAAE,CAChB;qBACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;qBACpB,OAAO,EAAE,CAAC;gBACf,MAAM,MAAM,GAA8B,EAAE,CAAC;gBAC7C,MAAM,WAAW,GAA8B,MAAM,IAAI,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;gBACrF,SAAS,CAAC,QAAQ,GAAG,WAAW,CAAC;gBACjC,MAAM,eAAe,GAAuB,SAAS,CAAC;gBACtD,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;gBAC7B,OAAO,MAAM,CAAC;aACjB;iBAAM;gBACH,MAAM,OAAO,GAA8B,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;gBAC5E,OAAO,OAAO,CAAC;aAClB;QAEL,CAAC;KAAA;IAOK,aAAa,CAAC,EAAU,EAAE,SAAoC;;YAChE,MAAM,QAAQ,GAA8B,EAAE,CAAC;YAC/C,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;gBACvB,MAAM,YAAY,GAAW,SAAS,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;gBAC/C,IAAI,eAAe,GAAG,IAAI,wCAAkB,EAAE,CAAC;gBAC/C,eAAe,GAAG,SAAS,CAAE,CAAC,CAAE,CAAC;gBACjC,MAAM,UAAU,GAA8B,MAAM,IAAI,CAAC,cAAc;qBAClE,kBAAkB,EAAE;qBACpB,KAAK,CACF,kBAAkB,EAClB,EAAE,EAAE,EAAE,YAAY,EAAE,CACvB;qBACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;qBACpB,OAAO,EAAE,CAAC;gBACf,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;oBACvB,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;wBACxB,MAAM,MAAM,GAA8B,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;wBACnG,eAAe,CAAC,QAAQ,GAAG,MAAM,CAAC;qBACrC;iBACJ;qBAAM;oBACH,eAAe,CAAC,QAAQ,GAAG,EAAE,CAAC;iBACjC;gBACD,MAAM,eAAe,GAAuB,eAAe,CAAC;gBAC5D,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAClC;YACD,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IASK,YAAY,CAAC,EAAU,EAAE,SAAgC;;YAC3D,MAAM,QAAQ,GAA0B,EAAE,CAAC;YAC3C,KAAK,MAAM,CAAC,IAAI,SAAS,EAAE;gBACvB,MAAM,YAAY,GAAW,SAAS,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;gBAC/C,IAAI,eAAe,GAAG,IAAI,gCAAc,EAAE,CAAC;gBAC3C,eAAe,GAAG,SAAS,CAAE,CAAC,CAAE,CAAC;gBACjC,MAAM,UAAU,GAA0B,MAAM,IAAI,CAAC,UAAU;qBAC1D,kBAAkB,EAAE;qBACpB,KAAK,CACF,kBAAkB,EAClB,EAAE,EAAE,EAAE,YAAY,EAAE,CACvB;qBACA,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;qBACpB,OAAO,EAAE,CAAC;gBACf,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;oBACvB,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;wBACxB,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,YAAY,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;wBAC9F,eAAe,CAAC,QAAQ,GAAG,MAAM,CAAC;qBACrC;iBACJ;qBAAM;oBACH,eAAe,CAAC,QAAQ,GAAG,EAAE,CAAC;iBACjC;gBACD,MAAM,eAAe,GAAmB,eAAe,CAAC;gBACxD,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;aAClC;YACD,OAAO,QAAQ,CAAC;QACpB,CAAC;KAAA;IAOK,iBAAiB,CAAC,EAAU,EAAE,MAA6B;;YAC7D,MAAM,WAAW,GAAkB,EAAE,CAAC;YACtC,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACpB,MAAM,GAAG,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;gBAC3B,IAAI,GAAG,KAAK,EAAE,EAAE;oBACZ,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACrB,MAAM,KAAK,GAA0B,MAAM,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAC;oBAC1D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;wBAClB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;4BACnB,MAAM,IAAI,GAAG,KAAK,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;4BAC3B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACvB,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BACvC,MAAM,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;yBAC9C;qBACJ;oBACD,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBACzC;aACJ;YACD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACxB;YAED,MAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACrC,OAAO,WAAW,CAAC;QAEvB,CAAC;KAAA;IAEK,iBAAiB,CAAC,EAAU;;YAC9B,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACvE,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;aAAE;YACpF,MAAM,oBAAU,EAAE,CAAC,KAAK,CAAC,qEAAqE,CAAC,CAAC;YAChG,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU;iBAC/B,kBAAkB,CAAC,wBAAwB,CAAC;iBAC5C,kBAAkB,CAAC,iCAAiC,EAAE,UAAU,CAAC;iBACjE,OAAO,CAAC,2BAA2B,CAAC;iBACpC,OAAO,EAAE,CAAC;YACf,MAAM,WAAW,GAA0B,MAAM,CAAC;YAClD,MAAM,oBAAU,EAAE,CAAC,KAAK,CAAC,8DAA8D,CAAC,CAAC;YACzF,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC1D,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,MAAM,SAAS,GAAyB,MAAM,IAAI,CAAC,aAAa;iBAC3D,kBAAkB,EAAE;iBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;iBACA,OAAO,EAAE,CAAC;YACf,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,kCAAkC,CAAC,CAAC;aAAE;YAC7F,MAAM,GAAG,GAAkB,MAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YACpE,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACtC,CAAC;KAAA;IAOK,kBAAkB,CAAC,EAAU;;YAC/B,MAAM,QAAQ,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAC/E,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;aAAE;YACpF,MAAM,oBAAU,EAAE,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;YAC7F,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc;iBACnC,kBAAkB,CAAC,qBAAqB,CAAC;iBACzC,kBAAkB,CACf,8BAA8B,EAC9B,UAAU,CACb;iBACA,OAAO,CAAC,wBAAwB,CAAC;iBACjC,OAAO,EAAE,CAAC;YACf,MAAM,oBAAU,EAAE,CAAC,KAAK,CAAC,yDAAyD,CAAC,CAAC;YACpF,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YAC9D,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,MAAM,SAAS,GAAsB,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,EAAE,CAAC,KAAK,CACrF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB,CAAC,OAAO,EAAE,CAAC;YACZ,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,oCAAoC,CAAC,CAAC;aAAE;YAC/F,MAAM,GAAG,GAAkB,MAAM,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;YAErE,OAAO,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC;KAAA;IAQK,kBAAkB,CAAC,EAAU,EAAE,MAAiC;;YAClE,MAAM,WAAW,GAAkB,EAAE,CAAC;YACtC,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACpB,MAAM,GAAG,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;gBAC3B,IAAI,GAAG,KAAK,EAAE,EAAE;oBACZ,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACrB,MAAM,KAAK,GAA8B,MAAM,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAC;oBAC9D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;wBAClB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;4BACnB,MAAM,IAAI,GAAG,KAAK,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC;4BAC3B,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;4BACvB,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BAC3C,MAAM,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;yBAC/C;qBACJ;oBACD,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;iBAC7C;aACJ;YACD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aACxB;YAED,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACzC,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAOK,qBAAqB,CAAC,aAA4B,EAAE,MAAc;;YACpE,IAAI,MAAM,KAAK,KAAK,EAAE;gBAClB,KAAK,MAAM,CAAC,IAAI,aAAa,EAAE;oBAC3B,MAAM,OAAO,GAAyB,MAAM,IAAI,CAAC,aAAa;yBACzD,kBAAkB,EAAE;yBACpB,KAAK,CACF,6BAA6B,EAC7B,EAAE,UAAU,EAAE,aAAa,CAAE,CAAC,CAAE,EAAE,CACrC;yBACA,OAAO,EAAE,CAAC;oBACf,MAAM,EAAE,GAAW,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;oBACnE,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;wBACrB,MAAM,UAAU,GAAkB,OAAO,CAAE,CAAC,CAAE,CAAC;wBAC/C,UAAU,CAAC,UAAU,GAAG,EAAE,CAAC;wBAC3B,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC;wBAC7B,UAAU,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;wBACjC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;qBAC5D;iBACJ;aACJ;iBAAM,IAAI,MAAM,KAAK,MAAM,EAAE;gBAC1B,KAAK,MAAM,CAAC,IAAI,aAAa,EAAE;oBAC3B,MAAM,OAAO,GAAsB,MAAM,IAAI,CAAC,cAAc;yBACvD,kBAAkB,EAAE;yBACpB,KAAK,CACF,6BAA6B,EAC7B,EAAE,UAAU,EAAE,aAAa,CAAE,CAAC,CAAE,EAAE,CACrC;yBACA,OAAO,EAAE,CAAC;oBACf,MAAM,EAAE,GAAG,MAAM,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;oBAC5D,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;wBACrB,MAAM,UAAU,GAAe,OAAO,CAAE,CAAC,CAAE,CAAC;wBAC5C,UAAU,CAAC,QAAQ,GAAG,MAAM,CAAC;wBAC7B,UAAU,CAAC,UAAU,GAAG,EAAE,CAAC;wBAC3B,UAAU,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;wBACjC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,UAAU,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;qBAC7D;iBACJ;aACJ;QACL,CAAC;KAAA;IAQK,cAAc,CAAC,EAAU;;YAC3B,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAErE,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAOK,eAAe,CAAC,EAAU;;YAC5B,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAE7E,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAOK,aAAa,CAAC,EAAU;;YAC1B,MAAM,YAAY,GAAyB,EAAE,CAAC;YAC9C,MAAM,QAAQ,GAAkB,EAAE,CAAC;YACnC,MAAM,eAAe,GAA0B,MAAM,IAAI,CAAC,UAAU;iBAC/D,kBAAkB,EAAE;iBACpB,KAAK,CAAC,uBAAuB,EAAE;gBAC5B,OAAO,EAAE,EAAE;aACd,CAAC;iBACD,OAAO,EAAE,CAAC;YACf,KAAK,MAAM,CAAC,IAAI,eAAe,EAAE;gBAC7B,QAAQ,CAAC,IAAI,CAAC,eAAe,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC;aAC1C;YACD,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;gBACtB,MAAM,GAAG,GAAyB,MAAM,IAAI,CAAC,aAAa;qBACrD,kBAAkB,EAAE;qBACpB,KAAK,CACF,6BAA6B,EAC7B;oBACI,UAAU,EAAE,QAAQ,CAAE,CAAC,CAAE;iBAC5B,CACJ;qBACA,OAAO,CAAC,kBAAkB,EAAE,KAAK,CAAC;qBAClC,OAAO,EAAE,CAAC;gBACf,YAAY,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;aAC7B;YACD,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;QACtC,CAAC;KAAA;IAOK,eAAe,CAAC,EAAU;;YAC5B,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACvE,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;aAAE;YACzF,MAAM,YAAY,GAAyB,EAAE,CAAC;YAC9C,MAAM,cAAc,GAAyB,MAAM,IAAI,CAAC,aAAa;iBAChE,kBAAkB,EAAE;iBACpB,KAAK,CACF,0DAA0D,EAC1D,EAAE,UAAU,EAAE,QAAQ,CAAC,OAAO,EAAE,CACnC;iBACA,OAAO,CAAC,wBAAwB,EAAE,KAAK,CAAC;iBACxC,OAAO,EAAE,CAAC;YACf,YAAY,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,CAAC;YACrC,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YACxE,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,MAAM,UAAU,GAAkB,EAAE,CAAC;YACrC,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;gBACtB,IAAI,QAAQ,CAAE,CAAC,CAAE,KAAK,QAAQ,CAAC,OAAO,EAAE;oBACpC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,CAAC;iBAClC;aACJ;YACD,MAAM,KAAK,GAAW,MAAM,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC7D,IAAI,KAAK,KAAK,CAAC,EAAE;gBACb,MAAM,WAAW,GAAyB,MAAM,IAAI,CAAC,aAAa;qBAC7D,kBAAkB,EAAE;qBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,yBAAyB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;qBAC3D,OAAO,CACJ,wBAAwB,EACxB,KAAK,CACR;qBACA,OAAO,EAAE,CAAC;gBACf,YAAY,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAK,KAAK,CAAC,EAAE;gBACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa;qBACvC,kBAAkB,EAAE;qBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,wBAAwB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;qBAC1D,OAAO,CACJ,wBAAwB,EACxB,KAAK,CACR;qBACA,OAAO,EAAE,CAAC;gBACf,YAAY,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;aACrC;iBAAM,IAAI,KAAK,KAAK,CAAC,EAAE;gBACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa;qBACvC,kBAAkB,EAAE;qBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,wBAAwB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;qBAC1D,OAAO,CACJ,wBAAwB,EACxB,KAAK,CACR;qBACA,OAAO,EAAE,CAAC;gBACf,YAAY,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;aACrC;YACD,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;QACtC,CAAC;KAAA;IAOK,mBAAmB,CAAC,KAAa;;YACnC,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC1E,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;aAAE;YACzF,MAAM,YAAY,GAAyB,EAAE,CAAC;YAC9C,MAAM,OAAO,GAAyB,MAAM,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC,KAAK,CACrF,oBAAoB,EACpB,EAAE,EAAE,EAAE,KAAK,EAAE,CAChB,CAAC,OAAO,CAAC,wBAAwB,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;YACrD,YAAY,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;YAC9B,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,CAAC;QACtC,CAAC;KAAA;IAMK,uBAAuB,CAAC,EAAU,EAAE,KAAc,EAAE,IAAc,EAAE,KAAc,EAAE,IAAa;;YACnG,MAAM,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC;YACxB,MAAM,QAAQ,GAAyB,EAAE,CAAC;YAC1C,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;YAC7D,IAAI,MAAM,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;aAAE;YACvF,IAAI,KAAK,GAAW,MAAM,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YACpD,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAC/D,OAAO,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAE3D,IAAI,IAAI,KAAK,IAAI,EAAE;gBACf,MAAM,MAAM,GAAyB,EAAE,CAAC;gBACxC,MAAM,UAAU,GAAyB,MAAM,IAAI,CAAC,aAAa;qBAC5D,kBAAkB,EAAE;qBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,QAAQ,EAAE,QAAQ,EAAE,CACzB;qBACA,QAAQ,CAAC,wCAAwC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;qBACjE,OAAO,CACJ,6BAA6B,EAC7B,MAAM,CACT;qBACA,OAAO,EAAE,CAAC;gBACf,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;oBACxB,IAAI,UAAU,CAAE,CAAC,CAAE,CAAC,OAAO,KAAK,IAAI,EAAE;wBAClC,MAAM,QAAQ,GAAkB,UAAU,CAAE,CAAC,CAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnE,MAAM,GAAG,GAAW,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,EAAE,CAAC,CAAC;wBACpD,IAAI,GAAG,GAAG,CAAC,EAAE;4BACT,MAAM,CAAC,IAAI,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,CAAC;yBAChC;qBACJ;yBAAM;wBACH,MAAM,CAAC,IAAI,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,CAAC;qBAChC;iBAEJ;gBACD,QAAQ,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,CAAC;aAC5B;YACD,IAAI,IAAI,KAAK,KAAK,EAAE;gBAChB,MAAM,WAAW,GAAyB,MAAM,IAAI,CAAC,aAAa;qBAC7D,kBAAkB,EAAE;qBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,qDAAqD,CAAC;qBAC/D,QAAQ,CACL,oBAAoB,EACpB,EAAE,IAAI,EAAE,GAAG,EAAE,CAChB;qBACA,OAAO,CAAC,6BAA6B,EAAE,MAAM,CAAC;qBAC9C,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;gBAC9B,KAAK,GAAG,CAAC,CAAC;aACb;YACD,IAAI,IAAI,KAAK,SAAS,EAAE;gBACpB,KAAK,GAAG,CAAC,CAAC;aACb;YACD,IAAI,KAAK,KAAK,CAAC,EAAE;gBACb,MAAM,WAAW,GAAyB,MAAM,IAAI,CAAC,aAAa;qBAC7D,kBAAkB,EAAE;qBACpB,KAAK,CACF,0BAA0B,EAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,yBAAyB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;qBAC3D,QAAQ,CACL,wCAAwC,EACxC,EAAE,IAAI,EAAE,GAAG,EAAE,CAChB;qBACA,OAAO,CAAC,6BAA6B,EAAE,MAAM,CAAC;qBAC9C,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;gBAC9B,MAAM,aAAa,GAAyB,MAAM,IAAI,CAAC,aAAa;qBAC/D,kBAAkB,EAAE;qBACpB,KAAK,CACF,2DAA2D,EAC3D,EAAE,UAAU,EAAE,EAAE,EAAE,CACrB;qBACA,QAAQ,CAAC,wCAAwC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;qBACjE,OAAO,CACJ,6BAA6B,EAC7B,MAAM,CACT;qBACA,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;aACnC;iBAAM,IAAI,KAAK,KAAK,CAAC,EAAE;gBACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa;qBACvC,kBAAkB,EAAE;qBACpB,KAAK,CACF,0BAA0B,EAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,yBAAyB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;qBAC3D,QAAQ,CACL,wCAAwC,EACxC,EAAE,IAAI,EAAE,GAAG,EAAE,CAChB;qBACA,OAAO,CAAC,6BAA6B,EAAE,MAAM,CAAC;qBAC9C,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;gBAC9B,MAAM,aAAa,GAAyB,MAAM,IAAI,CAAC,aAAa;qBAC/D,kBAAkB,EAAE;qBACpB,KAAK,CACF,uFAAuF,EACvF,EAAE,UAAU,EAAE,EAAE,EAAE,CACrB;qBACA,QAAQ,CAAC,wCAAwC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;qBACjE,OAAO,CACJ,6BAA6B,EAC7B,MAAM,CACT;qBACA,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;aACnC;iBAAM,IAAI,KAAK,KAAK,CAAC,EAAE;gBACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa;qBACvC,kBAAkB,EAAE;qBACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,yBAAyB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;qBAC3D,QAAQ,CACL,wCAAwC,EACxC,EAAE,IAAI,EAAE,GAAG,EAAE,CAChB;qBACA,OAAO,CAAC,6BAA6B,EAAE,MAAM,CAAC;qBAC9C,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;gBAC9B,MAAM,aAAa,GAAyB,MAAM,IAAI,CAAC,aAAa,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAC3F,uFAAuF,EACvF,EAAE,UAAU,EAAE,EAAE,EAAE,CACrB,CAAC,QAAQ,CAAC,wCAAwC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,OAAO,CACvE,6BAA6B,EAC7B,MAAM,CACT,CAAC,OAAO,EAAE,CAAC;gBACZ,QAAQ,CAAC,IAAI,CAAC,GAAG,aAAa,CAAC,CAAC;aACnC;iBAAM,IAAI,KAAK,KAAK,CAAC,EAAE;gBACpB,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,aAAa;qBACvC,kBAAkB,EAAE;qBACpB,KAAK,CACF,8CAA8C,EAC9C,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;qBACA,QAAQ,CAAC,oBAAoB,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;qBAC7C,OAAO,CAAC,6BAA6B,EAAE,MAAM,CAAC;qBAC9C,OAAO,EAAE,CAAC;gBACf,QAAQ,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,CAAC;aACjC;YACD,MAAM,GAAG,GAAW,QAAQ,CAAC,MAAM,CAAC;YACpC,MAAM,SAAS,GAAyB,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACjF,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;QACpD,CAAC;KAAA;IAEK,KAAK,CAAC,GAAyB,EAAE,KAAc,EAAE,KAAc;;YACjE,IAAI,MAAM,GAAyB,EAAE,CAAC;YACtC,IAAI,KAAK,EAAE;gBACP,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,KAAK,GAAG,CACxB,KAAK,GAAG,CAAC,CACZ,EAAE,KAAK,CAAC,CAAC;aACb;iBAAM;gBACH,MAAM,GAAG,GAAG,CAAC;aAChB;YACD,OAAO,MAAM,CAAC;QAElB,CAAC;KAAA;IAMK,mBAAmB;;YACrB,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,KAAK,CAClF,sDAAsD,CAAC,CAAC,OAAO,EAAE,CAAC;YACtE,IAAI,WAAW,GAAkB,EAAE,CAAC;YACpC,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACpB,WAAW,CAAC,IAAI,CAAC,MAAM,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC;gBACjC,WAAW,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,MAAM,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAClE,OAAO,CAAC,CAAC;gBACb,CAAC,CAAC,CAAC,CAAC;aACP;YACD,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC;YAC/C,OAAO,WAAW,CAAC;QACvB,CAAC;KAAA;IAOK,aAAa,CAAC,KAAa;;YAC7B,MAAM,oBAAU,EAAE,CAAC,KAAK,CAAC,qEAAqE,CAAC,CAAC;YAChG,MAAM,MAAM,GAA0B,MAAM,IAAI,CAAC,UAAU;iBACtD,kBAAkB,EAAE;iBACpB,KAAK,CACF,uBAAuB,EACvB,EAAE,OAAO,EAAE,KAAK,EAAE,CACrB;iBACA,OAAO,EAAE,CAAC;YACf,MAAM,KAAK,GAAkB,EAAE,CAAC;YAChC,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU;qBAC/B,kBAAkB,CAAC,wBAAwB,CAAC;qBAC5C,KAAK,CACF,gCAAgC,EAChC,EAAE,EAAE,EAAE,KAAK,EAAE,CAChB;qBACA,kBAAkB,CACf,iCAAiC,EACjC,UAAU,CACb;qBACA,OAAO,CAAC,2BAA2B,CAAC,CAAC,OAAO,EAAE,CAAC;gBACpD,MAAM,UAAU,GAA0B,MAAM,CAAC;gBACjD,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;oBACxB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC;oBAC/B,IAAI,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrC,KAAK,MAAM,CAAC,IAAI,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,EAAE;4BACtC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC;4BAC7C,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC,CAAC;yBAC7E;qBACJ;iBACJ;aACJ;YACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClB,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAOK,iBAAiB,CAAC,KAAa;;YACjC,MAAM,oBAAU,EAAE,CAAC,KAAK,CAAC,kEAAkE,CAAC,CAAC;YAC7F,MAAM,KAAK,GAAkB,EAAE,CAAC;YAChC,MAAM,MAAM,GAA8B,MAAM,IAAI,CAAC,cAAc;iBAC9D,kBAAkB,EAAE;iBACpB,KAAK,CACF,uBAAuB,EACvB,EAAE,OAAO,EAAE,KAAK,EAAE,CACrB;iBACA,OAAO,EAAE,CAAC;YACf,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;gBACnB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,qBAAqB,CAAC,CAAC,KAAK,CACpF,6BAA6B,EAC7B,EAAE,EAAE,EAAE,KAAK,EAAE,CAChB,CAAC,kBAAkB,CAAC,8BAA8B,EAAE,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC;gBAC3E,MAAM,UAAU,GAA8B,MAAM,CAAC;gBACrD,KAAK,MAAM,CAAC,IAAI,UAAU,EAAE;oBACxB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC;oBAC/B,IAAI,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;wBACrC,KAAK,MAAM,CAAC,IAAI,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,EAAE;4BACtC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC;4BAC7C,KAAK,CAAC,IAAI,CAAC,GAAG,MAAM,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAE,CAAC,CAAE,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,EAAE,CAAC,CAAC,CAAC;yBACjF;qBACJ;iBACJ;aACJ;YACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClB,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAOY,SAAS,CAAC,EAAU;;YAC7B,MAAM,GAAG,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;YAChE,MAAM,KAAK,GAA0B,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;YAC9E,IAAI,GAAW,CAAC;YAChB,KAAK,MAAM,CAAC,IAAI,KAAK,EAAE;gBACnB,IAAI,KAAK,CAAE,CAAC,CAAE,CAAC,EAAE,KAAK,CAAC,EAAE;oBACrB,GAAG,GAAG,KAAK,CAAE,CAAC,CAAE,CAAC,KAAK,CAAC;iBAC1B;aACJ;YAED,OAAO,GAAG,CAAC;QACf,CAAC;KAAA;IAOY,iBAAiB,CAAC,GAA0B,EAAE,EAAU,EAAE,KAAa;;YAChF,MAAM,KAAK,GAA0B,EAAE,CAAC;YACxC,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;gBACjB,IAAI,GAAG,CAAE,CAAC,CAAE,CAAC,EAAE,KAAK,EAAE,EAAE;oBACpB,GAAG,CAAE,CAAC,CAAE,CAAC,KAAK,GAAG,KAAK,CAAC;oBACvB,MAAM,OAAO,GAAmB,GAAG,CAAE,CAAC,CAAE,CAAC;oBACzC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBACpB,MAAM,QAAQ,GAA0B,MAAM,IAAI,CAAC,iBAAiB,CAAC,GAAG,EAAE,GAAG,CAAE,CAAC,CAAE,CAAC,OAAO,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;oBACvG,KAAK,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;iBAE3B;aACJ;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAOM,eAAe,CAAC,KAAc;QACjC,IAAI,UAAkB,CAAC;QACvB,IAAI,KAAK,KAAK,CAAC,EAAE;YACb,UAAU,GAAG,QAAQ,CAAC;SACzB;aAAM,IAAI,KAAK,KAAK,CAAC,EAAE;YACpB,UAAU,GAAG,QAAQ,CAAC;SACzB;aAAM,IAAI,KAAK,KAAK,CAAC,EAAE;YACpB,UAAU,GAAG,QAAQ,CAAC;SACzB;aAAM,IAAI,KAAK,KAAK,CAAC,EAAE;YACpB,UAAU,GAAG,SAAS,CAAC;SAC1B;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAQY,iBAAiB,CAAC,EAAU,EAAE,OAAe;;YACtD,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACvE,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;aAAE;YACpF,IAAI,OAAO,KAAK,CAAC,EAAE;gBACf,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAC1E,IAAI,MAAM,KAAK,IAAI,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;iBAAE;aACrF;YACD,IAAI,OAAO,KAAK,CAAC,EAAE;gBACf,OAAO,GAAG,CAAC,CAAC;aACf;YAED,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;YAC3B,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAC/D,OAAO,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;YACH,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC9B,QAAQ,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAC/B,MAAM,WAAW,GAAmB,QAAQ,CAAC;YAC7C,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YACxD,OAAO,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;QAEtC,CAAC;KAAA;IAQY,cAAc,CAAC,GAAkB;;YAC1C,MAAM,QAAQ,GAAyB,MAAM,IAAI,CAAC,aAAa;iBAC1D,kBAAkB,EAAE;iBACpB,KAAK,CACF,0BAA0B,EAC1B,EAAE,EAAE,EAAE,GAAG,EAAE,CACd;iBACA,OAAO,EAAE,CAAC;YACf,KAAK,MAAM,CAAC,IAAI,QAAQ,EAAE;gBACtB,IAAI,GAAG,GAAG,IAAI,8BAAa,EAAE,CAAC;gBAC9B,GAAG,GAAG,QAAQ,CAAE,CAAC,CAAE,CAAC;gBACpB,GAAG,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBACxB,GAAG,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC1B,MAAM,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;aACpD;QACL,CAAC;KAAA;IAQY,kBAAkB,CAAC,EAAU,EAAE,OAAe;;YACvD,MAAM,QAAQ,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAC/E,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;aAAE;YACpF,IAAI,OAAO,KAAK,CAAC,EAAE;gBACf,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;gBAClF,IAAI,MAAM,KAAK,IAAI,EAAE;oBAAE,MAAM,IAAI,kCAAgB,CAAC,4BAA4B,CAAC,CAAC;iBAAE;aACrF;YACD,IAAI,OAAO,KAAK,CAAC,EAAE;gBACf,OAAO,GAAG,CAAC,CAAC;aACf;YACD,QAAQ,CAAC,OAAO,GAAG,OAAO,CAAC;YAC3B,QAAQ,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;YAC/B,MAAM,WAAW,GAAuB,QAAQ,CAAC;YACjD,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;YAE5D,OAAO,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC;QACvC,CAAC;KAAA;IAOY,uBAAuB,CAAC,EAAU;;YAC3C,MAAM,KAAK,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YAE5E,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAQY,qBAAqB,CAAC,KAAa,EAAE,MAAc;;YAC5D,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,IAAI,MAAM,KAAK,KAAK,EAAE;gBAClB,MAAM,UAAU,GAAmB,MAAM,IAAI,CAAC,UAAU;qBACnD,kBAAkB,EAAE;qBACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,KAAK,EAAE,CAC3B;qBACA,MAAM,EAAE,CAAC;gBACd,IAAI,UAAU,KAAK,IAAI,EAAE;oBACrB,MAAM,QAAQ,GAAG,IAAI,gCAAc,EAAE,CAAC;oBACtC,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC;oBACrB,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC;oBACxB,QAAQ,CAAC,aAAa,GAAG,MAAM,CAAC;oBAChC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC;oBAC3B,MAAM,MAAM,GAAW,MAAM,IAAI,CAAC,UAAU;yBACvC,kBAAkB,EAAE;yBACpB,MAAM,EAAE;yBACR,IAAI,CAAC,gCAAc,CAAC;yBACpB,MAAM,CAAC,QAAQ,CAAC;yBAChB,MAAM,CAAC,IAAI,CAAC;yBACZ,OAAO,EAAE,CAAC;oBACf,MAAM,GAAG,GAAW,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC3C,MAAM,MAAM,GAAW,GAAG;yBACrB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACtB,MAAM,QAAQ,GAAkB,MAAM;yBACjC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,KAAK,CAAC,GAAG,CAAC,CAAC;oBAChB,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,CAAC;iBACjC;qBAAM;oBACH,KAAK,GAAG,UAAU,CAAC,EAAE,CAAC;iBACzB;aACJ;iBAAM,IAAI,MAAM,KAAK,MAAM,EAAE;gBAC1B,MAAM,WAAW,GAAuB,MAAM,IAAI,CAAC,cAAc;qBAC5D,kBAAkB,EAAE;qBACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,KAAK,EAAE,CAC3B;qBACA,MAAM,EAAE,CAAC;gBACd,IAAI,WAAW,KAAK,IAAI,EAAE;oBACtB,MAAM,QAAQ,GAAG,IAAI,wCAAkB,EAAE,CAAC;oBAC1C,QAAQ,CAAC,OAAO,GAAG,CAAC,CAAC;oBACrB,QAAQ,CAAC,KAAK,GAAG,MAAM,CAAC;oBACxB,QAAQ,CAAC,aAAa,GAAG,MAAM,CAAC;oBAChC,QAAQ,CAAC,QAAQ,GAAG,MAAM,CAAC;oBAC3B,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc;yBACnC,kBAAkB,EAAE;yBACpB,MAAM,EAAE;yBACR,IAAI,CAAC,wCAAkB,CAAC;yBACxB,MAAM,CAAC,QAAQ,CAAC;yBAChB,MAAM,CAAC,IAAI,CAAC;yBACZ,OAAO,EAAE,CAAC;oBACf,MAAM,GAAG,GAAW,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;oBAC3C,MAAM,MAAM,GAAW,GAAG;yBACrB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;oBACtB,MAAM,QAAQ,GAAkB,MAAM;yBACjC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;yBAChB,KAAK,CAAC,GAAG,CAAC,CAAC;oBAChB,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAE,CAAC,CAAE,CAAC,CAAC;iBACjC;qBAAM;oBACH,KAAK,GAAG,WAAW,CAAC,EAAE,CAAC;iBAC1B;aACJ;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;KAAA;IAOK,gBAAgB,CAAC,EAAU,EAAE,OAAuB;;YACtD,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;YACrE,IAAI,MAAM,KAAK,IAAI,EAAE;gBAAE,MAAM,IAAI,kCAAgB,CAAC,iCAAiC,CAAC,CAAC;aAAE;YACvF,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;YAC1D,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YACf,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;YAC3D,IAAI,GAAG,GAAG,CAAC,CAAC;YACZ,MAAM,MAAM,GAAyB,MAAM,IAAI,CAAC,aAAa;iBACxD,kBAAkB,EAAE;iBACpB,KAAK,CACF,0BAA0B,EAC1B,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB;iBACA,QAAQ,CAAC,0BAA0B,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;iBAC5D,OAAO,EAAE,CAAC;YACf,MAAM,QAAQ,GAAkB,EAAE,CAAC;YACnC,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;gBACrB,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,OAAO,CAAE,CAAC,CAAE,CAAC,CAAC;gBACpE,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC3D,QAAQ,CAAC,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;aAC9B;YACD,QAAQ,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,CAAC;YAC1B,MAAM,UAAU,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC;YAChE,KAAK,MAAM,CAAC,IAAI,MAAM,EAAE;gBACpB,IAAI,MAAM,GAAG,IAAI,8BAAa,EAAE,CAAC;gBACjC,MAAM,GAAG,MAAM,CAAE,CAAC,CAAE,CAAC;gBACrB,MAAM,CAAC,QAAQ,GAAG,QAAQ,CAAC;gBAC3B,MAAM,CAAC,OAAO,GAAG,UAAU,CAAC,QAAQ,EAAE,CAAC;gBACvC,MAAM,CAAC,QAAQ,GAAG,IAAI,IAAI,EAAE,CAAC;gBAC7B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBACjD,GAAG,EAAE,CAAC;aACT;YACD,OAAO,GAAG,CAAC;QACf,CAAC;KAAA;IAQK,gBAAgB,CAAC,MAAc,EAAE,EAAU;;YAC7C,IAAI,MAAM,EAAE,gBAAgB,CAAC;YAC7B,MAAM,KAAK,GAAkB,EAAE,CAAC;YAChC,IAAI,MAAM,KAAK,KAAK,EAAE;gBAClB,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBACrE,IAAI,MAAM,KAAK,IAAI,EAAE;oBAAE,gBAAgB,GAAG,SAAS,CAAC;iBAAE;gBACtD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC3B,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU;qBACzB,kBAAkB,EAAE;qBACpB,KAAK,CAAC,kBAAkB,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC;qBACxC,OAAO,CACJ,IAAI,EACJ,KAAK,CACR;qBACA,OAAO,EAAE,CAAC;aAClB;YACD,IAAI,MAAM,KAAK,MAAM,EAAE;gBACnB,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;gBAC7E,IAAI,MAAM,KAAK,IAAI,EAAE;oBAAE,gBAAgB,GAAG,SAAS,CAAC;iBAAE;gBACtD,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACf,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC3B,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc;qBAC7B,kBAAkB,EAAE;qBACpB,KAAK,CAAC,kBAAkB,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC;qBACxC,OAAO,CACJ,IAAI,EACJ,KAAK,CACR,CAAC,OAAO,EAAE,CAAC;aACnB;YACD,IAAI,MAAM,KAAK,IAAI,EAAE;gBACjB,gBAAgB,GAAG,MAAM,CAAC;aAC7B;YACD,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,CAAC;QAC1E,CAAC;KAAA;IAQK,YAAY,CAAC,GAAyB;;YACxC,MAAM,MAAM,GAAyB,EAAE,CAAC;YACxC,KAAK,MAAM,CAAC,IAAI,GAAG,EAAE;gBACjB,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAE,CAAC,CAAE,CAAC,UAAU,CAAC,CAAC;gBACxF,GAAG,CAAE,CAAC,CAAE,CAAC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC;gBACnC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAE,CAAC,CAAE,CAAC,CAAC;aACzB;YAED,OAAO,MAAM,CAAC;QAClB,CAAC;KAAA;IAUK,aAAa,CAAC,MAAc,EAAE,EAAW,EAAE,OAAgB,EAAE,KAAc,EAAE,SAAkB;;YACjG,IAAI,MAAM,CAAC;YACX,IAAI,MAAM,GAAG,IAAI,CAAC;YAClB,IAAI,EAAE,GAAG,CAAC,EAAE;gBACR,IAAI,MAAM,KAAK,KAAK,EAAE;oBAClB,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;oBACrE,IAAI,MAAM,KAAK,IAAI,EAAE;wBAAE,MAAM,GAAG,WAAW,CAAC;qBAAE;oBAC9C,MAAM,GAAG,KAAK,CAAC;iBAClB;qBAAM;oBACH,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;oBAC7E,IAAI,MAAM,KAAK,IAAI,EAAE;wBAAE,MAAM,GAAG,WAAW,CAAC;qBAAE;oBAC9C,MAAM,GAAG,KAAK,CAAC;iBAClB;aACJ;YACD,IAAI,OAAO,GAAG,CAAC,EAAE;gBACb,IAAI,MAAM,KAAK,KAAK,EAAE;oBAClB,MAAM,SAAS,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;oBACtE,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;wBACtB,MAAM,MAAM,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wBAC1E,IAAI,MAAM,KAAK,IAAI,EAAE;4BAAE,MAAM,GAAG,eAAe,CAAC;yBAAE;wBAClD,MAAM,GAAG,KAAK,CAAC;qBAClB;iBAEJ;qBAAM;oBACH,MAAM,SAAS,GAA8B,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;oBAC9E,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;wBACtB,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;wBAClF,IAAI,MAAM,KAAK,IAAI,EAAE;4BAAE,MAAM,GAAG,eAAe,CAAC;yBAAE;wBAClD,MAAM,GAAG,KAAK,CAAC;qBAClB;iBACJ;aACJ;YACD,IAAI,KAAK,EAAE;gBACP,IAAI,MAAM,KAAK,KAAK,EAAE;oBAClB,IAAI,EAAE,EAAE;wBACJ,MAAM,QAAQ,GAAmB,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;wBACvE,IAAI,QAAQ,CAAC,aAAa,KAAK,KAAK,EAAE;4BAClC,MAAM,WAAW,GAA0B,MAAM,IAAI,CAAC,UAAU;iCAC3D,kBAAkB,EAAE;iCACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,KAAK,EAAE,CAC3B;iCACA,OAAO,EAAE,CAAC;4BACf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gCAAE,MAAM,GAAG,QAAQ,CAAC;6BAAE;4BAClD,MAAM,GAAG,KAAK,CAAC;yBAClB;qBACJ;yBAAM;wBACH,MAAM,WAAW,GAA0B,MAAM,IAAI,CAAC,UAAU,CAAC,kBAAkB,EAAE,CAAC,KAAK,CACvF,mCAAmC,EACnC,EAAE,aAAa,EAAE,KAAK,EAAE,CAC3B,CAAC,OAAO,EAAE,CAAC;wBACZ,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;4BAAE,MAAM,GAAG,QAAQ,CAAC;yBAAE;wBAClD,MAAM,GAAG,KAAK,CAAC;qBAClB;iBAEJ;qBAAM;oBACH,IAAI,EAAE,EAAE;wBACJ,MAAM,MAAM,GAAuB,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;wBAC7E,IAAI,MAAM,CAAC,aAAa,KAAK,KAAK,EAAE;4BAChC,MAAM,WAAW,GAA8B,MAAM,IAAI,CAAC,cAAc;iCACnE,kBAAkB,EAAE;iCACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,KAAK,EAAE,CAC3B;iCACA,OAAO,EAAE,CAAC;4BACf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;gCAAE,MAAM,GAAG,QAAQ,CAAC;6BAAE;4BAClD,MAAM,GAAG,KAAK,CAAC;yBAClB;qBACJ;yBAAM;wBACH,MAAM,WAAW,GAA8B,MAAM,IAAI,CAAC,cAAc;6BACnE,kBAAkB,EAAE;6BACpB,KAAK,CACF,mCAAmC,EACnC,EAAE,aAAa,EAAE,KAAK,EAAE,CAC3B;6BACA,OAAO,EAAE,CAAC;wBACf,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;4BAAE,MAAM,GAAG,QAAQ,CAAC;yBAAE;wBAClD,MAAM,GAAG,KAAK,CAAC;qBAClB;iBAEJ;aACJ;YACD,IAAI,SAAS,GAAG,CAAC,EAAE;gBACf,IAAI,MAAM,KAAK,KAAK,EAAE;oBAClB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;oBAC5D,IAAI,MAAM,KAAK,IAAI,EAAE;wBACjB,MAAM,GAAG,SAAS,CAAC;wBACnB,MAAM,GAAG,KAAK,CAAC;qBAClB;yBAAM;wBACH,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;wBACjE,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC3D,MAAM,SAAS,GAAyB,MAAM,IAAI,CAAC,aAAa;6BAC3D,kBAAkB,EAAE;6BACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB,CAAC,OAAO,EAAE,CAAC;wBAChB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;4BAAE,MAAM,GAAG,eAAe,CAAC;yBAAE;wBACvD,MAAM,GAAG,KAAK,CAAC;qBAClB;iBAEJ;qBAAM;oBACH,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC;oBAChE,IAAI,MAAM,KAAK,IAAI,EAAE;wBACjB,MAAM,GAAG,SAAS,CAAC;wBACnB,MAAM,GAAG,KAAK,CAAC;qBAClB;yBAAM;wBACH,MAAM,KAAK,GAAkB,MAAM,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;wBACrE,MAAM,QAAQ,GAAkB,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC;wBAC3D,MAAM,SAAS,GAAsB,MAAM,IAAI,CAAC,cAAc;6BACzD,kBAAkB,EAAE;6BACpB,KAAK,CACF,yBAAyB,EACzB,EAAE,EAAE,EAAE,QAAQ,EAAE,CACnB,CAAC,OAAO,EAAE,CAAC;wBAChB,IAAI,SAAS,CAAC,MAAM,GAAG,CAAC,EAAE;4BAAE,MAAM,GAAG,eAAe,CAAC;yBAAE;wBACvD,MAAM,GAAG,KAAK,CAAC;qBAClB;iBACJ;aACJ;YACD,IAAI,CAAC,MAAM,EAAE;gBACT,MAAM,GAAG,IAAI,CAAC;aACjB;YAED,OAAO,EAAE,gBAAgB,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC;QAC1D,CAAC;KAAA;CACJ,CAAA;AAz0CY,eAAe;IAD3B,kBAAS,EAAE;IAGH,WAAA,0BAAgB,CAAC,gCAAc,CAAC,CAAA;IAChC,WAAA,0BAAgB,CAAC,8BAAa,CAAC,CAAA;IAC/B,WAAA,0BAAgB,CAAC,wCAAkB,CAAC,CAAA;IACpC,WAAA,0BAAgB,CAAC,wBAAU,CAAC,CAAA;qCAHkC,oBAAU;QACR,oBAAU;QACJ,oBAAU;QAClB,oBAAU;GALpE,eAAe,CAy0C3B;AAz0CY,0CAAe","file":"classify.service.js","sourcesContent":["import { Component } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { getManager, Repository } from \"typeorm\";\nimport { isNumber } from \"util\";\nimport { ArticleEntity } from \"../../entity/article.entity\";\nimport { ClassifyEntity } from \"../../entity/classify.entity\";\nimport { PageEntity } from \"../../entity/page.entity\";\nimport { PageClassifyEntity } from \"../../entity/pageClassify.entity\";\nimport { MessageCodeError } from \"../errorMessage/error.interface\";\n\n@Component()\nexport class ClassifyService {\n    constructor(\n        @InjectRepository(ClassifyEntity) private readonly repository: Repository<ClassifyEntity>,\n        @InjectRepository(ArticleEntity) private readonly artRepository: Repository<ArticleEntity>,\n        @InjectRepository(PageClassifyEntity) private readonly pageRepository: Repository<PageClassifyEntity>,\n        @InjectRepository(PageEntity) private readonly repositoryPage: Repository<PageEntity>,\n    ) {\n    }\n\n    /**\n     * 新增文章分类\n     * @param {ClassifyEntity} entity\n     * @param {string} parent\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async createClassifyArt(entity: ClassifyEntity, limit?: number): Promise<Array<ClassifyEntity>> {\n        const firstClass: Array<ClassifyEntity> = await this.repository.find();\n        if (firstClass.length === 0) {\n            const newClassify = new ClassifyEntity();\n            newClassify.groupId = undefined;\n            newClassify.classifyAlias = \"无\";\n            newClassify.title = \"无\";\n            const id = await this.repository\n                .createQueryBuilder()\n                .insert()\n                .into(ClassifyEntity)\n                .values(newClassify)\n                .output(\"id\")\n                .execute();\n            const str: string = JSON.stringify(id).split(\":\")[ 1 ];\n            const numb: string = str.substring(0, str.lastIndexOf(\"}\"));\n            const newId: number = Number(numb);\n            entity.groupId = newId;\n            await this.repository.insert(entity);\n        } else {\n            const newClassify: Array<ClassifyEntity> = await this.repository.createQueryBuilder().where(\n                \"\\\"classifyAlias\\\"= :classifyAlias\",\n                { classifyAlias: -entity.classifyAlias },\n            ).getMany();\n            /*别名不能重复*/\n            if (newClassify.length > 0) { throw new MessageCodeError(\"create:classify:aliasRepeat\"); }\n            const parentClassify: ClassifyEntity = await this.repository.findOneById(entity.groupId);\n            /*通过父级id确定父级是否存在*/\n            if (entity.groupId !== 0 && parentClassify === null) {\n                throw new MessageCodeError(\"create:classify:parentIdMissing\");\n            }\n            const first: ClassifyEntity = await this.repository.findOneById(1);\n            if (entity.groupId === 0 && first === null) {\n                entity.groupId = undefined;\n            } else if (entity.groupId === 0) {\n                entity.groupId = 1;\n            }\n            const classify: ClassifyEntity = entity;\n            await this.repository.insert(classify);\n        }\n\n        return this.findAllClassifyArt(limit);\n    }\n\n    /**\n     * 新增页面分类\n     * @param {PageClassifyEntity} entity\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async createClassifyPage(entity: PageClassifyEntity, limit?: number): Promise<Array<PageClassifyEntity>> {\n        const firstClass: Array<PageClassifyEntity> = await this.pageRepository.find();\n        if (firstClass.length === 0) {\n            const newClassify = new PageClassifyEntity();\n            newClassify.groupId = undefined;\n            newClassify.classifyAlias = \"无\";\n            newClassify.title = \"无\";\n            const id = await this.pageRepository\n                .createQueryBuilder()\n                .insert()\n                .into(PageClassifyEntity)\n                .values(newClassify)\n                .output(\"id\")\n                .execute();\n            const str: string = JSON.stringify(id).split(\":\")[ 1 ];\n            const numb: string = str.substring(0, str.lastIndexOf(\"}\"));\n            const newId: number = Number(numb);\n            entity.groupId = newId;\n            await this.pageRepository.insert(entity);\n        } else {\n            const newClassify: Array<PageClassifyEntity> = await this.pageRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyAlias\\\"= :classifyAlias\",\n                    { classifyAlias: -entity.classifyAlias },\n                )\n                .getMany();\n            /*别名不能重复*/\n            if (newClassify.length > 0) { throw new MessageCodeError(\"create:classify:aliasRepeat\"); }\n            const parentClassify: PageClassifyEntity = await this.pageRepository.findOneById(entity.groupId);\n            /*通过父级id确定父级是否存在*/\n            if (entity.groupId !== 0 && entity.groupId !== null && parentClassify === null) {\n                throw new MessageCodeError(\"create:classify:parentIdMissing\");\n            }\n            const first: PageClassifyEntity = await this.pageRepository.findOneById(1);\n            if (entity.groupId === 0 && first === null) {\n                entity.groupId = undefined;\n            } else if (entity.groupId === 0) {\n                entity.groupId = 1;\n            }\n            const classify: PageClassifyEntity = entity;\n            await this.pageRepository.insert(classify);\n        }\n\n        return this.findAllClassifyPage(limit);\n    }\n\n    /**\n     * 修改文章分类\n     * @param {ClassifyEntity} entity\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async updateClassifyArt(entity: ClassifyEntity, id?: number): Promise<Array<ClassifyEntity>> {\n        /*当前Id是否存在*/\n        const classify: ClassifyEntity = await this.repository.findOneById(entity.id);\n        if (classify === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        if (entity.classifyAlias !== classify.classifyAlias) {\n            const newClassify: Array<ClassifyEntity> = await this.repository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyAlias\\\"= :classifyAlias\",\n                    { classifyAlias: entity.classifyAlias },\n                )\n                .getMany();\n            /*别名不能重复*/\n            if (newClassify.length > 0) { throw new MessageCodeError(\"create:classify:aliasRepeat\"); }\n        }\n        if (isNumber(entity.groupId)) {\n            const parentClassify: ClassifyEntity = await this.repository.findOneById(entity.groupId);\n            /*通过父级别名确定父级是否存在*/\n            if (parentClassify === null) { throw new MessageCodeError(\"create:classify:parentIdMissing\"); }\n        }\n        entity.updateAt = new Date();\n        const finalClassify: ClassifyEntity = entity;\n        await this.repository.updateById(entity.id, finalClassify);\n\n        return this.findAllClassifyArt(id);\n    }\n\n    /**\n     * 修改页面分类\n     * @param {PageClassifyEntity} entity\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async updateClassifyPage(entity: PageClassifyEntity, id?: number): Promise<Array<PageClassifyEntity>> {\n        const classify: PageClassifyEntity = await this.pageRepository.findOneById(entity.id);\n        if (classify === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        if (entity.classifyAlias !== classify.classifyAlias) {\n            const newClassify: Array<PageClassifyEntity> = await this.pageRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyAlias\\\"= :classifyAlias\",\n                    { classifyAlias: entity.classifyAlias },\n                )\n                .getMany();\n            /*别名不能重复*/\n            if (newClassify.length > 0) { throw new MessageCodeError(\"create:classify:aliasRepeat\"); }\n        }\n        if (isNumber(entity.groupId)) {\n            const parentClassify: PageClassifyEntity = await this.pageRepository.findOneById(entity.groupId);\n            /*通过父级别名确定父级是否存在*/\n            if (parentClassify === null) { throw new MessageCodeError(\"create:classify:parentIdMissing\"); }\n        }\n        entity.updateAt = new Date();\n        await this.pageRepository.updateById(entity.id, entity);\n        return this.findAllClassifyPage(id);\n    }\n\n    /**\n     * 查找文章所有分类\n     * @param {number} id\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async findAllClassifyArt(idNum: number): Promise<Array<ClassifyEntity>> {\n        const idFindOne: ClassifyEntity = await this.repository\n            .createQueryBuilder()\n            .where(\n                \"\\\"id\\\"= :id\",\n                { id: idNum },\n            )\n            .getOne();\n        if (idFindOne) {\n            const list: Array<ClassifyEntity> = await this.repository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"groupId\\\"= :groupId\",\n                    { groupId: idNum },\n                )\n                .orderBy(\"id\", \"ASC\")\n                .getMany();\n            const result: Array<ClassifyEntity> = [];\n            const resultArray: Array<ClassifyEntity> = await this.Artrecursion(idNum, list);\n            idFindOne.children = resultArray;\n            const newPageClassify: ClassifyEntity = idFindOne;\n            result.push(newPageClassify);\n            return result;\n        } else {\n            const newArt: Array<ClassifyEntity> = await this.repository.find();\n            return newArt;\n        }\n\n    }\n\n    /**\n     * 查找页面所有分类\n     * @returns {Promise<Array<PageClassifyEntity>>}\n     */\n    async findAllClassifyPage(idNum: number): Promise<Array<PageClassifyEntity>> {\n        const idFindOne: PageClassifyEntity = await this.pageRepository\n            .createQueryBuilder()\n            .where(\n                \"\\\"id\\\"= :id\",\n                { id: idNum },\n            )\n            .getOne();\n        if (idFindOne) {\n            const list: Array<PageClassifyEntity> = await this.pageRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"groupId\\\"= :id\",\n                    { id: idNum },\n                )\n                .orderBy(\"id\", \"ASC\")\n                .getMany();\n            const result: Array<PageClassifyEntity> = [];\n            const resultArray: Array<PageClassifyEntity> = await this.Pagerecursion(idNum, list);\n            idFindOne.children = resultArray;\n            const newPageClassify: PageClassifyEntity = idFindOne;\n            result.push(newPageClassify);\n            return result;\n        } else {\n            const newPage: Array<PageClassifyEntity> = await this.pageRepository.find();\n            return newPage;\n        }\n\n    }\n\n    /**\n     * 页面无极限分类\n     * @param {Array<ClassifyEntity>} entity\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async Pagerecursion(id: number, listFirst: Array<PageClassifyEntity>): Promise<Array<PageClassifyEntity>> {\n        const children: Array<PageClassifyEntity> = [];\n        for (const t in listFirst) {\n            const groupIdFirst: number = listFirst[ t ].id;\n            let navigationArray = new PageClassifyEntity();\n            navigationArray = listFirst[ t ];\n            const listSecond: Array<PageClassifyEntity> = await this.pageRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"groupId\\\"= :id\",\n                    { id: groupIdFirst },\n                )\n                .orderBy(\"id\", \"ASC\")\n                .getMany();\n            if (listSecond.length > 0) {\n                for (const h in listSecond) {\n                    const theEnd: Array<PageClassifyEntity> = await this.Pagerecursion(listSecond[ h ].id, listSecond);\n                    navigationArray.children = theEnd;\n                }\n            } else {\n                navigationArray.children = [];\n            }\n            const navigationFinal: PageClassifyEntity = navigationArray;\n            children.push(navigationFinal);\n        }\n        return children;\n    }\n\n    /**\n     * 文章无极限分类\n     * @param {number} id\n     * @param {Array<ClassifyEntity>} listFirst\n     * @returns {Promise<Array<ClassifyEntity>>}\n     * @constructor\n     */\n    async Artrecursion(id: number, listFirst: Array<ClassifyEntity>): Promise<Array<ClassifyEntity>> {\n        const children: Array<ClassifyEntity> = [];\n        for (const t in listFirst) {\n            const groupIdFirst: number = listFirst[ t ].id;\n            let navigationArray = new ClassifyEntity();\n            navigationArray = listFirst[ t ];\n            const listSecond: Array<ClassifyEntity> = await this.repository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"groupId\\\"= :id\",\n                    { id: groupIdFirst },\n                )\n                .orderBy(\"id\", \"ASC\")\n                .getMany();\n            if (listSecond.length > 0) {\n                for (const h in listSecond) {\n                    const theEnd: Array<ClassifyEntity> = await this.Artrecursion(listSecond[ h ].id, listSecond);\n                    navigationArray.children = theEnd;\n                }\n            } else {\n                navigationArray.children = [];\n            }\n            const navigationFinal: ClassifyEntity = navigationArray;\n            children.push(navigationFinal);\n        }\n        return children;\n    }\n\n    /**\n     * 通过Id删除文章分类及对应的子分类\n     * @param {number} id\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async deleteClassifyArt(id: number, result: Array<ClassifyEntity>): Promise<Array<number>> {\n        const deleteArray: Array<number> = [];\n        for (const t in result) {\n            const num = result[ t ].id;\n            if (num === id) {\n                deleteArray.push(id);\n                const array: Array<ClassifyEntity> = result[ t ].children;\n                if (array.length > 0) {\n                    for (const h in array) {\n                        const numH = array[ h ].id;\n                        deleteArray.push(numH);\n                        await this.repository.deleteById(numH);\n                        await this.deleteClassifyArt(numH, result);\n                    }\n                }\n                await this.repository.deleteById(num);\n            }\n        }\n        if (deleteArray.length === 0) {\n            deleteArray.push(id);\n        }\n        /* this.updateArticleClassify(deleteArray,\"art\");*/\n        await this.repository.deleteById(id);\n        return deleteArray;\n\n    }\n\n    async deleteMethodFirst(id: number) {\n        const classify: ClassifyEntity = await this.repository.findOneById(id);\n        if (classify === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        await getManager().query(\"update public.article_classify_table set \\\"parentId\\\" = \\\"groupId\\\"\");\n        const result = await this.repository\n            .createQueryBuilder(\"article_classify_table\")\n            .innerJoinAndSelect(\"article_classify_table.children\", \"children\")\n            .orderBy(\"article_classify_table.id\")\n            .getMany();\n        const resultArray: Array<ClassifyEntity> = result;\n        await getManager().query(\"update public.article_classify_table set \\\"parentId\\\" = null\");\n        const array: Array<number> = await this.getClassifyId(id);\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        const artiicles: Array<ArticleEntity> = await this.artRepository\n            .createQueryBuilder()\n            .where(\n                \"\\\"classifyId\\\" in (:id)\",\n                { id: newArray },\n            )\n            .getMany();\n        if (artiicles.length > 0) { throw new MessageCodeError(\"delete:art:ClassifyIdIncludeArts\"); }\n        const res: Array<number> = await this.deleteClassifyArt(id, result);\n        return this.findAllClassifyArt(1);\n    }\n\n    /**\n     * 通过id删除页面分类及对应的子分类\n     * @param {number} id\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    async deleteMethodSecond(id: number): Promise<Array<PageClassifyEntity>> {\n        const classify: PageClassifyEntity = await this.pageRepository.findOneById(id);\n        if (classify === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        await getManager().query(\"update public.page_classify_table set \\\"parentId\\\" = \\\"groupId\\\"\");\n        const result = await this.pageRepository\n            .createQueryBuilder(\"page_classify_table\")\n            .innerJoinAndSelect(\n                \"page_classify_table.children\",\n                \"children\",\n            )\n            .orderBy(\"page_classify_table.id\")\n            .getMany();\n        await getManager().query(\"update public.page_classify_table set \\\"parentId\\\"=null\");\n        const array: Array<number> = await this.getClassifyIdPage(id);\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        const artiicles: Array<PageEntity> = await this.repositoryPage.createQueryBuilder().where(\n            \"\\\"classifyId\\\" in (:id)\",\n            { id: newArray },\n        ).getMany();\n        if (artiicles.length > 0) { throw new MessageCodeError(\"delete:page:ClassifyIdIncludePages\"); }\n        const res: Array<number> = await this.deleteClassifyPage(id, result);\n\n        return this.findAllClassifyPage(1);\n    }\n\n    /**\n     * 页面删除分类\n     * @param {number} id\n     * @param {Array<ClassifyEntity>} result\n     * @returns {Promise<Array<number>>}\n     */\n    async deleteClassifyPage(id: number, result: Array<PageClassifyEntity>): Promise<Array<number>> {\n        const deleteArray: Array<number> = [];\n        for (const t in result) {\n            const num = result[ t ].id;\n            if (num === id) {\n                deleteArray.push(id);\n                const array: Array<PageClassifyEntity> = result[ t ].children;\n                if (array.length > 0) {\n                    for (const h in array) {\n                        const numH = array[ h ].id;\n                        deleteArray.push(numH);\n                        await this.pageRepository.deleteById(numH);\n                        await this.deleteClassifyPage(numH, result);\n                    }\n                }\n                await this.pageRepository.deleteById(num);\n            }\n        }\n        if (deleteArray.length === 0) {\n            deleteArray.push(id);\n        }\n        /*this.updateArticleClassify(deleteArray,\"page\");*/\n        await this.pageRepository.deleteById(id);\n        return deleteArray;\n    }\n\n    /**\n     * 删除分类后，修改文章状态为默认分类。需要新建一个分类为默认\n     * @param {Array<number>} classifyArray\n     * @returns {Promise<void>}\n     */\n    async updateArticleClassify(classifyArray: Array<number>, useFor: string) {\n        if (useFor === \"art\") {\n            for (const t in classifyArray) {\n                const article: Array<ArticleEntity> = await this.artRepository\n                    .createQueryBuilder()\n                    .where(\n                        \"\\\"classifyId\\\"= :classifyId\",\n                        { classifyId: classifyArray[ t ] },\n                    )\n                    .getMany();\n                const id: number = await this.findTheDefaultByAlias(\"默认分类\", \"art\");\n                for (const h in article) {\n                    const newArticle: ArticleEntity = article[ h ];\n                    newArticle.classifyId = id;\n                    newArticle.classify = \"默认分类\";\n                    newArticle.updateAt = new Date();\n                    this.artRepository.updateById(newArticle.id, newArticle);\n                }\n            }\n        } else if (useFor === \"page\") {\n            for (const t in classifyArray) {\n                const article: Array<PageEntity> = await this.repositoryPage\n                    .createQueryBuilder()\n                    .where(\n                        \"\\\"classifyId\\\"= :classifyId\",\n                        { classifyId: classifyArray[ t ] },\n                    )\n                    .getMany();\n                const id = await this.findTheDefaultByAlias(\"默认分类\", \"page\");\n                for (const h in article) {\n                    const newArticle: PageEntity = article[ h ];\n                    newArticle.classify = \"默认分类\";\n                    newArticle.classifyId = id;\n                    newArticle.updateAt = new Date();\n                    this.repositoryPage.updateById(newArticle.id, newArticle);\n                }\n            }\n        }\n    }\n\n    /**\n     * 根据id查找文章分类\n     * @param {number} id\n     * @param {string} useFor\n     * @returns {Promise<ClassifyEntity>}\n     */\n    async findOneByIdArt(id: number): Promise<ClassifyEntity> {\n        const entity: ClassifyEntity = await this.repository.findOneById(id);\n\n        return entity;\n    }\n\n    /**\n     * 根据id查找页面分类\n     * @param {number} id\n     * @returns {Promise<PageClassifyEntity>}\n     */\n    async findOneByIdPage(id: number): Promise<PageClassifyEntity> {\n        const entity: PageClassifyEntity = await this.pageRepository.findOneById(id);\n\n        return entity;\n    }\n\n    /**\n     * 显示子级分类文章\n     * @param {number} id\n     * @returns {Promise<Array<ArticleEntity>>}\n     */\n    async showNextTitle(id: number) {\n        const articleArray: Array<ArticleEntity> = [];\n        const arrayNum: Array<number> = [];\n        const classifications: Array<ClassifyEntity> = await this.repository\n            .createQueryBuilder()\n            .where(\"\\\"groupId\\\"= :groupId\", {\n                groupId: id,\n            })\n            .getMany();\n        for (const t in classifications) {\n            arrayNum.push(classifications[ t ].id);\n        }\n        for (const h in arrayNum) {\n            const art: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\"= :classifyId\",\n                    {\n                        classifyId: arrayNum[ h ],\n                    },\n                )\n                .orderBy(\"ArticleEntity.id\", \"ASC\")\n                .getMany();\n            articleArray.push(...art);\n        }\n        return { articles: articleArray };\n    }\n\n    /**\n     * 显示上级置顶文章\n     * @param {number} id\n     * @returns {Promise<Array<ArticleEntity>>}\n     */\n    async showBeforeTitle(id: number) {\n        const classify: ClassifyEntity = await this.repository.findOneById(id);\n        if (classify === null) { throw new MessageCodeError(\"page:classify:classifyIdMissing\"); }\n        const articleArray: Array<ArticleEntity> = [];\n        const currentArticle: Array<ArticleEntity> = await this.artRepository\n            .createQueryBuilder()\n            .where(\n                \"\\\"classifyId\\\"= :classifyId and \\\"topPlace\\\"=\\'current\\'\",\n                { classifyId: classify.groupId },\n            )\n            .orderBy(\"ArticleEntity.updateAt\", \"ASC\")\n            .getMany();\n        articleArray.push(...currentArticle);\n        const array: Array<number> = await this.getClassifyId(classify.groupId);\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        const finalArray: Array<number> = [];\n        for (const t in newArray) {\n            if (newArray[ t ] !== classify.groupId) {\n                finalArray.push(newArray[ t ]);\n            }\n        }\n        const level: number = await this.findLevel(classify.groupId);\n        if (level === 1) {\n            const newArticles: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in (:id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\"= :topPlace\", { topPlace: \"level1\" })\n                .orderBy(\n                    \"ArticleEntity.updateAt\",\n                    \"ASC\",\n                )\n                .getMany();\n            articleArray.push(...newArticles);\n        } else if (level === 2) {\n            const newArticles = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in (:id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\" :topPlace\", { topPlace: \"level2\" })\n                .orderBy(\n                    \"ArticleEntity.updateAt\",\n                    \"ASC\",\n                )\n                .getMany();\n            articleArray.push(...newArticles);\n        } else if (level === 3) {\n            const newArticles = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in (:id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\" :topPlace\", { topPlace: \"level3\" })\n                .orderBy(\n                    \"ArticleEntity.updateAt\",\n                    \"ASC\",\n                )\n                .getMany();\n            articleArray.push(...newArticles);\n        }\n        return { articles: articleArray };\n    }\n\n    /**\n     * 当前分类文章\n     * @param {number} id\n     * @returns {Promise<Array<ArticleEntity>>}\n     */\n    async showCurrentArticles(idNum: number) {\n        const classify: ClassifyEntity = await this.repository.findOneById(idNum);\n        if (classify === null) { throw new MessageCodeError(\"page:classify:classifyIdMissing\"); }\n        const articleArray: Array<ArticleEntity> = [];\n        const current: Array<ArticleEntity> = await this.artRepository.createQueryBuilder().where(\n            \"\\\"classifyId\\\"=:id\",\n            { id: idNum },\n        ).orderBy(\"ArticleEntity.updateAt\", \"ASC\").getMany();\n        articleArray.push(...current);\n        return { articles: articleArray };\n    }\n\n    /**\n     * 通过分类id获取文章(包含置顶)\n     * @param {number} id\n     */\n    async getArticelsByClassifyId(id: number, limit?: number, show?: boolean, pages?: number, name?: string) {\n        const str = `%${name}%`;\n        const articles: Array<ArticleEntity> = [];\n        const entity: ClassifyEntity = await this.findOneByIdArt(id);\n        if (entity === null) { throw new MessageCodeError(\"page:classify:classifyIdMissing\"); }\n        let level: number = await this.findLevel(entity.id);\n        const array: Array<number> = await this.getClassifyId(id).then(a => {\n            return a;\n        });\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        /*置顶：无 获取对应关键字或分类 对应的文章,是：获取对应分类下，置顶到1、2 、 3级分类的文章,否：获取对应分类下置顶到4、 5 分类的文章*/\n        if (show === true) {\n            const global: Array<ArticleEntity> = [];\n            const globalArts: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"topPlace\\\"= :topPlace\",\n                    { topPlace: \"global\" },\n                )\n                .andWhere(\"\\\"name\\\"like :name and recycling=false\", { name: str })\n                .orderBy(\n                    \"ArticleEntity.publishedTime\",\n                    \"DESC\",\n                )\n                .getMany();\n            for (const t in globalArts) {\n                if (globalArts[ t ].display !== null) {\n                    const newArray: Array<string> = globalArts[ t ].display.split(\",\");\n                    const num: number = newArray.indexOf(id.toString());\n                    if (num < 0) {\n                        global.push(globalArts[ t ]);\n                    }\n                } else {\n                    global.push(globalArts[ t ]);\n                }\n\n            }\n            articles.push(...global);\n        }\n        if (show === false) {\n            const newArticles: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in( :id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\"=\\\"current\\\" or \\\"topPlace\\\"=\\\"cancel\\\"\")\n                .andWhere(\n                    \"\\\"name\\\"like :name\",\n                    { name: str },\n                )\n                .orderBy(\"ArticleEntity.publishedTime\", \"DESC\")\n                .getMany();\n            articles.push(...newArticles);\n            level = 5;\n        }\n        if (show === undefined) {\n            level = 4;\n        }\n        if (level === 1) {\n            const newArticles: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in ( :id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\"= :topPlace\", { topPlace: \"level1\" })\n                .andWhere(\n                    \"\\\"name\\\"like :name and recycling=false\",\n                    { name: str },\n                )\n                .orderBy(\"ArticleEntity.publishedTime\", \"DESC\")\n                .getMany();\n            articles.push(...newArticles);\n            const finalArticles: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\"= :classifyId  and \\\"topPlace\\\"<>\\\"global\\\"\",\n                    { classifyId: id },\n                )\n                .andWhere(\"\\\"name\\\"like :name and recycling=false\", { name: str })\n                .orderBy(\n                    \"ArticleEntity.publishedTime\",\n                    \"DESC\",\n                )\n                .getMany();\n            articles.push(...finalArticles);\n        } else if (level === 2) {\n            const newArticles = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in ( :id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\"= :topPlace\", { topPlace: \"level2\" })\n                .andWhere(\n                    \"\\\"name\\\"like :name and recycling=false\",\n                    { name: str },\n                )\n                .orderBy(\"ArticleEntity.publishedTime\", \"DESC\")\n                .getMany();\n            articles.push(...newArticles);\n            const finalArticles: Array<ArticleEntity> = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\"= :classifyId and \\\"topPlace\\\"<>\\\"level1\\\" and \\\"topPlace\\\"<>\\\"global\\\"\",\n                    { classifyId: id },\n                )\n                .andWhere(\"\\\"name\\\"like :name and recycling=false\", { name: str })\n                .orderBy(\n                    \"ArticleEntity.publishedTime\",\n                    \"DESC\",\n                )\n                .getMany();\n            articles.push(...finalArticles);\n        } else if (level === 3) {\n            const newArticles = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in (:id)\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"topPlace\\\"= :topPlace\", { topPlace: \"level3\" })\n                .andWhere(\n                    \"\\\"name\\\"like :name and recycling=false\",\n                    { name: str },\n                )\n                .orderBy(\"ArticleEntity.publishedTime\", \"DESC\")\n                .getMany();\n            articles.push(...newArticles);\n            const finalArticles: Array<ArticleEntity> = await this.artRepository.createQueryBuilder().where(\n                \"\\\"classifyId\\\"= :classifyId and \\\"topPlace\\\"<>\\\"level2\\\" and \\\"topPlace\\\"<>\\\"global\\\"\",\n                { classifyId: id },\n            ).andWhere(\"\\\"name\\\"like :name and recycling=false\", { name: str }).orderBy(\n                \"ArticleEntity.publishedTime\",\n                \"DESC\",\n            ).getMany();\n            articles.push(...finalArticles);\n        } else if (level === 4) {\n            const newArticles = await this.artRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyId\\\" in ( :id) and recycling=false\",\n                    { id: newArray },\n                )\n                .andWhere(\"\\\"name\\\"like :name\", { name: str })\n                .orderBy(\"ArticleEntity.publishedTime\", \"DESC\")\n                .getMany();\n            articles.push(...newArticles);\n        }\n        const num: number = articles.length;\n        const returnArt: Array<ArticleEntity> = await this.Fenji(articles, limit, pages);\n        return { articles: returnArt, totalItems: num };\n    }\n\n    async Fenji(art: Array<ArticleEntity>, limit?: number, pages?: number): Promise<Array<ArticleEntity>> {\n        let newArt: Array<ArticleEntity> = [];\n        if (limit) {\n            newArt = art.splice(limit * (\n                pages - 1\n            ), limit);\n        } else {\n            newArt = art;\n        }\n        return newArt;\n\n    }\n\n    /**\n     * 文章关键字搜索---对应资讯和活动\n     * @returns {Promise<Array<number>>}\n     */\n    async getClassifyIdForArt() {\n        const custom: Array<ClassifyEntity> = await this.repository.createQueryBuilder().where(\n            \"\\\"classifyAlias\\\"=\\'活动\\' or \\\"classifyAlias\\\"=\\'资讯\\'\").getMany();\n        let customArray: Array<number> = [];\n        for (const t in custom) {\n            customArray.push(custom[ t ].id);\n            customArray.push(...await this.getClassifyId(custom[ t ].id).then(a => {\n                return a;\n            }));\n        }\n        customArray = Array.from(new Set(customArray));\n        return customArray;\n    }\n\n    /**\n     * 获取当前分类所有子分类id\n     * @param {number} id\n     * @returns {Promise<Array<number>>}\n     */\n    async getClassifyId(idNum: number): Promise<Array<number>> {\n        await getManager().query(\"update public.article_classify_table set \\\"parentId\\\" = \\\"groupId\\\"\");\n        const entity: Array<ClassifyEntity> = await this.repository\n            .createQueryBuilder()\n            .where(\n                \"\\\"groupId\\\"= :groupId\",\n                { groupId: idNum },\n            )\n            .getMany();\n        const array: Array<number> = [];\n        if (entity.length > 0) {\n            const result = await this.repository\n                .createQueryBuilder(\"article_classify_table\")\n                .where(\n                    \"article_classify_table.id= :id\",\n                    { id: idNum },\n                )\n                .innerJoinAndSelect(\n                    \"article_classify_table.children\",\n                    \"children\",\n                )\n                .orderBy(\"article_classify_table.id\").getMany();\n            const firstArray: Array<ClassifyEntity> = result;\n            for (const t in firstArray) {\n                array.push(firstArray[ t ].id);\n                if (firstArray[ t ].children.length > 0) {\n                    for (const h in firstArray[ t ].children) {\n                        array.push(firstArray[ t ].children[ h ].id);\n                        array.push(...await this.getClassifyId(firstArray[ t ].children[ h ].id));\n                    }\n                }\n            }\n        }\n        array.push(idNum);\n        return array;\n    }\n\n    /**\n     * 获取当前分类所有子分类id\n     * @param {number} id\n     * @returns {Promise<Array<number>>}\n     */\n    async getClassifyIdPage(idNum: number): Promise<Array<number>> {\n        await getManager().query(\"update public.page_classify_table set \\\"parentId\\\" = \\\"groupId\\\"\");\n        const array: Array<number> = [];\n        const entity: Array<PageClassifyEntity> = await this.pageRepository\n            .createQueryBuilder()\n            .where(\n                \"\\\"groupId\\\"= :groupId\",\n                { groupId: idNum },\n            )\n            .getMany();\n        if (entity.length > 0) {\n            const result = await this.pageRepository.createQueryBuilder(\"page_classify_table\").where(\n                \"page_classify_table.id= :id\",\n                { id: idNum },\n            ).innerJoinAndSelect(\"page_classify_table.children\", \"children\").getMany();\n            const firstArray: Array<PageClassifyEntity> = result;\n            for (const t in firstArray) {\n                array.push(firstArray[ t ].id);\n                if (firstArray[ t ].children.length > 0) {\n                    for (const h in firstArray[ t ].children) {\n                        array.push(firstArray[ t ].children[ h ].id);\n                        array.push(...await this.getClassifyIdPage(firstArray[ t ].children[ h ].id));\n                    }\n                }\n            }\n        }\n        array.push(idNum);\n        return array;\n    }\n\n    /**\n     * 获取当前分类级别\n     * @param {number} id\n     * @returns {Promise<void>}\n     */\n    public async findLevel(id: number): Promise<number> {\n        const arr: Array<ClassifyEntity> = await this.repository.find();\n        const final: Array<ClassifyEntity> = await this.showClassifyLevel(arr, id, 0);\n        let num: number;\n        for (const t in final) {\n            if (final[ t ].id === 1) {\n                num = final[ t ].level;\n            }\n        }\n\n        return num;\n    }\n\n    /**\n     * 找出分类级别\n     * @param {number} ids\n     * @returns {Promise<number>}\n     */\n    public async showClassifyLevel(arr: Array<ClassifyEntity>, id: number, level: number) {\n        const array: Array<ClassifyEntity> = [];\n        for (const t in arr) {\n            if (arr[ t ].id === id) {\n                arr[ t ].level = level;\n                const newClas: ClassifyEntity = arr[ t ];\n                array.push(newClas);\n                const arrayCla: Array<ClassifyEntity> = await this.showClassifyLevel(arr, arr[ t ].groupId, level + 1);\n                array.push(...arrayCla);\n\n            }\n        }\n        return array;\n    }\n\n    /**\n     * 级别转换\n     * @param {number} level\n     * @returns {string}\n     */\n    public interfaceChange(level?: number): string {\n        let finalLevel: string;\n        if (level === 1) {\n            finalLevel = \"level1\";\n        } else if (level === 2) {\n            finalLevel = \"level2\";\n        } else if (level === 3) {\n            finalLevel = \"level3\";\n        } else if (level === 4) {\n            finalLevel = \"current\";\n        }\n        return finalLevel;\n    }\n\n    /**\n     * 文章分类移动\n     * @param {number} id\n     * @param {number} groupId\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    public async mobileClassifyArt(id: number, groupId: number): Promise<Array<ClassifyEntity>> {\n        const classify: ClassifyEntity = await this.repository.findOneById(id);\n        if (classify === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        if (groupId !== 0) {\n            const parent: ClassifyEntity = await this.repository.findOneById(groupId);\n            if (parent === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        }\n        if (groupId === 0) {\n            groupId = 1;\n        }\n\n        classify.groupId = groupId;\n        const array: Array<number> = await this.getClassifyId(id).then(a => {\n            return a;\n        });\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        this.resetTheSetTop(newArray);\n        classify.updateAt = new Date();\n        const newClassify: ClassifyEntity = classify;\n        this.repository.updateById(newClassify.id, newClassify);\n        return this.findAllClassifyArt(1);\n\n    }\n\n    /**\n     * 重置置顶关系\n     * @param {Array<number>} arr\n     *\n     * @returns {Promise<void>}\n     */\n    public async resetTheSetTop(arr: Array<number>) {\n        const articles: Array<ArticleEntity> = await this.artRepository\n            .createQueryBuilder()\n            .where(\n                \"\\\"classifyId\\\" in ( :id)\",\n                { id: arr },\n            )\n            .getMany();\n        for (const t in articles) {\n            let arr = new ArticleEntity();\n            arr = articles[ t ];\n            arr.topPlace = \"cancel\";\n            arr.updateAt = new Date();\n            await this.artRepository.updateById(arr.id, arr);\n        }\n    }\n\n    /**\n     * 页面分类移动\n     * @param {number} id\n     * @param {number} groupId\n     * @returns {Promise<Array<ClassifyEntity>>}\n     */\n    public async mobileClassifyPage(id: number, groupId: number): Promise<Array<PageClassifyEntity>> {\n        const classify: PageClassifyEntity = await this.pageRepository.findOneById(id);\n        if (classify === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        if (groupId !== 0) {\n            const parent: PageClassifyEntity = await this.pageRepository.findOneById(groupId);\n            if (parent === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        }\n        if (groupId === 0) {\n            groupId = 1;\n        }\n        classify.groupId = groupId;\n        classify.updateAt = new Date();\n        const newClassify: PageClassifyEntity = classify;\n        this.pageRepository.updateById(newClassify.id, newClassify);\n\n        return this.findAllClassifyPage(1);\n    }\n\n    /**\n     * 根据分类id查找页面分类本身\n     * @param {number} id\n     * @returns {Promise<PageClassifyEntity>}\n     */\n    public async findOnePageClassifyById(id: number): Promise<PageClassifyEntity> {\n        const final: PageClassifyEntity = await this.pageRepository.findOneById(id);\n\n        return final;\n    }\n\n    /**\n     * 判断默认分类是否存在\n     * @param {string} Alias\n     * @param {string} useFor\n     * @returns {Promise<number>}\n     */\n    public async findTheDefaultByAlias(alias: string, useFor: string) {\n        let numId = 0;\n        if (useFor === \"art\") {\n            const defaultArt: ClassifyEntity = await this.repository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyAlias\\\"= :classifyAlias\",\n                    { classifyAlias: alias },\n                )\n                .getOne();\n            if (defaultArt === null) {\n                const classify = new ClassifyEntity();\n                classify.groupId = 1;\n                classify.title = \"默认分类\";\n                classify.classifyAlias = \"默认分类\";\n                classify.describe = \"默认分类\";\n                const result: string = await this.repository\n                    .createQueryBuilder()\n                    .insert()\n                    .into(ClassifyEntity)\n                    .values(classify)\n                    .output(\"id\")\n                    .execute();\n                const str: string = JSON.stringify(result);\n                const newstr: string = str\n                    .replace(\"{\", \"\")\n                    .replace(\"}\", \"\")\n                    .replace(\"[\", \"\")\n                    .replace(\"]\", \"\");\n                const finalStr: Array<string> = newstr\n                    .replace(\"'\", \"\")\n                    .replace(\"'\", \"\")\n                    .split(\":\");\n                numId = Number(finalStr[ 1 ]);\n            } else {\n                numId = defaultArt.id;\n            }\n        } else if (useFor === \"page\") {\n            const defaultPage: PageClassifyEntity = await this.pageRepository\n                .createQueryBuilder()\n                .where(\n                    \"\\\"classifyAlias\\\"= :classifyAlias\",\n                    { classifyAlias: alias },\n                )\n                .getOne();\n            if (defaultPage === null) {\n                const classify = new PageClassifyEntity();\n                classify.groupId = 1;\n                classify.title = \"默认分类\";\n                classify.classifyAlias = \"默认分类\";\n                classify.describe = \"默认分类\";\n                const result = await this.pageRepository\n                    .createQueryBuilder()\n                    .insert()\n                    .into(PageClassifyEntity)\n                    .values(classify)\n                    .output(\"id\")\n                    .execute();\n                const str: string = JSON.stringify(result);\n                const newstr: string = str\n                    .replace(\"{\", \"\")\n                    .replace(\"}\", \"\")\n                    .replace(\"[\", \"\")\n                    .replace(\"]\", \"\");\n                const finalStr: Array<string> = newstr\n                    .replace(\"'\", \"\")\n                    .replace(\"'\", \"\")\n                    .split(\":\");\n                numId = Number(finalStr[ 1 ]);\n            } else {\n                numId = defaultPage.id;\n            }\n        }\n        return numId;\n    }\n\n    /**\n     * 分类批量置顶到全局\n     * @param {number} id\n     * @returns {Promise<number>}\n     */\n    async classifyTopPlace(id: number, display?: Array<number>) {\n        const entity: ClassifyEntity = await this.repository.findOneById(id);\n        if (entity === null) { throw new MessageCodeError(\"page:classify:classifyIdMissing\"); }\n        const array: Array<number> = await this.getClassifyId(id);\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        let num = 0;\n        const result: Array<ArticleEntity> = await this.artRepository\n            .createQueryBuilder()\n            .where(\n                \"\\\"classifyId\\\" in ( :id)\",\n                { id: newArray },\n            )\n            .andWhere(\"\\\"topPlace\\\"<> :topPlace\", { topPlace: \"global\" })\n            .getMany();\n        const numArray: Array<number> = [];\n        for (const t in display) {\n            const array: Array<number> = await this.getClassifyId(display[ t ]);\n            const newArray: Array<number> = Array.from(new Set(array));\n            numArray.push(...newArray);\n        }\n        numArray.push(...display);\n        const finalArray: Array<number> = Array.from(new Set(numArray));\n        for (const t in result) {\n            let newArt = new ArticleEntity();\n            newArt = result[ t ];\n            newArt.topPlace = \"global\";\n            newArt.display = finalArray.toString();\n            newArt.updateAt = new Date();\n            this.artRepository.updateById(newArt.id, newArt);\n            num++;\n        }\n        return num;\n    }\n\n    /**\n     * 获取单个具体分类\n     * @param {string} useFor\n     * @param {number} id\n     * @returns {Promise<{classify: any; MessageCodeError: any}>}\n     */\n    async findClassifyById(useFor: string, id: number) {\n        let result, messageCodeError;\n        const array: Array<number> = [];\n        if (useFor === \"art\") {\n            const entity: ClassifyEntity = await this.repository.findOneById(id);\n            if (entity === null) { messageCodeError = \"当前分类不存在\"; }\n            array.push(id);\n            array.push(entity.groupId);\n            result = await this.repository\n                .createQueryBuilder()\n                .where(\"\\\"id\\\" in ( :id)\", { id: array })\n                .orderBy(\n                    \"id\",\n                    \"ASC\",\n                )\n                .getMany();\n        }\n        if (useFor === \"page\") {\n            const entity: PageClassifyEntity = await this.pageRepository.findOneById(id);\n            if (entity === null) { messageCodeError = \"当前分类不存在\"; }\n            array.push(id);\n            array.push(entity.groupId);\n            result = await this.pageRepository\n                .createQueryBuilder()\n                .where(\"\\\"id\\\" in ( :id)\", { id: array })\n                .orderBy(\n                    \"id\",\n                    \"ASC\",\n                ).getMany();\n        }\n        if (result !== null) {\n            messageCodeError = \"查找成功\";\n        }\n        return { classifyEntity: result, MessageCodeError: messageCodeError };\n    }\n\n    /**\n     * 文章时间格式转化\n     * @param {Array<ArticleEntity>} art\n     * @returns {Promise<Article[]>}\n     * @constructor\n     */\n    async TimestampArt(art: Array<ArticleEntity>) {\n        const result: Array<ArticleEntity> = [];\n        for (const t in art) {\n            const classify: ClassifyEntity = await this.repository.findOneById(art[ t ].classifyId);\n            art[ t ].classify = classify.title;\n            result.push(art[ t ]);\n        }\n\n        return result;\n    }\n\n    /**\n     *\n     * @param {string} useFor\n     * @param {number} id\n     * @param {string} alias\n     * @param {number} deleteNum\n     * @returns {Promise<{MessageCodeError: any; Continue: boolean}>}\n     */\n    async classifyCheck(useFor: string, id?: number, groupId?: number, alias?: string, deleteNum?: number) {\n        let result;\n        let update = true;\n        if (id > 0) {\n            if (useFor === \"art\") {\n                const entity: ClassifyEntity = await this.repository.findOneById(id);\n                if (entity === null) { result = \"当前文章分类不存在\"; }\n                update = false;\n            } else {\n                const entity: PageClassifyEntity = await this.pageRepository.findOneById(id);\n                if (entity === null) { result = \"当前页面分类不存在\"; }\n                update = false;\n            }\n        }\n        if (groupId > 0) {\n            if (useFor === \"art\") {\n                const entityAll: Array<ClassifyEntity> = await this.repository.find();\n                if (entityAll.length > 0) {\n                    const entity: ClassifyEntity = await this.repository.findOneById(groupId);\n                    if (entity === null) { result = \"当前文章分类父级分类不存在\"; }\n                    update = false;\n                }\n\n            } else {\n                const entityAll: Array<PageClassifyEntity> = await this.pageRepository.find();\n                if (entityAll.length > 0) {\n                    const entity: PageClassifyEntity = await this.pageRepository.findOneById(groupId);\n                    if (entity === null) { result = \"当前页面分类父级分类不存在\"; }\n                    update = false;\n                }\n            }\n        }\n        if (alias) {\n            if (useFor === \"art\") {\n                if (id) {/*修改文章分类*/\n                    const classify: ClassifyEntity = await this.repository.findOneById(id);\n                    if (classify.classifyAlias !== alias) {\n                        const newClassify: Array<ClassifyEntity> = await this.repository\n                            .createQueryBuilder()\n                            .where(\n                                \"\\\"classifyAlias\\\"= :classifyAlias\",\n                                { classifyAlias: alias },\n                            )\n                            .getMany();\n                        if (newClassify.length > 0) { result = \"别名不能重复\"; }\n                        update = false;\n                    }\n                } else {/*增加文章分类*/\n                    const newClassify: Array<ClassifyEntity> = await this.repository.createQueryBuilder().where(\n                        \"\\\"classifyAlias\\\"= :classifyAlias\",\n                        { classifyAlias: alias },\n                    ).getMany();\n                    if (newClassify.length > 0) { result = \"别名不能重复\"; }\n                    update = false;\n                }\n\n            } else {\n                if (id) {/*修改页面分类*/\n                    const entity: PageClassifyEntity = await this.pageRepository.findOneById(id);\n                    if (entity.classifyAlias !== alias) {\n                        const newClassify: Array<PageClassifyEntity> = await this.pageRepository\n                            .createQueryBuilder()\n                            .where(\n                                \"\\\"classifyAlias\\\"= :classifyAlias\",\n                                { classifyAlias: alias },\n                            )\n                            .getMany();\n                        if (newClassify.length > 0) { result = \"别名不能重复\"; }\n                        update = false;\n                    }\n                } else {/*添加页面分类*/\n                    const newClassify: Array<PageClassifyEntity> = await this.pageRepository\n                        .createQueryBuilder()\n                        .where(\n                            \"\\\"classifyAlias\\\"= :classifyAlias\",\n                            { classifyAlias: alias },\n                        )\n                        .getMany();\n                    if (newClassify.length > 0) { result = \"别名不能重复\"; }\n                    update = false;\n                }\n\n            }\n        }\n        if (deleteNum > 0) {\n            if (useFor === \"art\") {\n                const entity = await this.repository.findOneById(deleteNum);\n                if (entity === null) {\n                    result = \"当前分类不存在\";\n                    update = false;\n                } else {\n                    const array: Array<number> = await this.getClassifyId(deleteNum);\n                    const newArray: Array<number> = Array.from(new Set(array));\n                    const artiicles: Array<ArticleEntity> = await this.artRepository\n                        .createQueryBuilder()\n                        .where(\n                            \"\\\"classifyId\\\" in (:id)\",\n                            { id: newArray },\n                        ).getMany();\n                    if (artiicles.length > 0) { result = \"当前分类下有文章,不能删除\"; }\n                    update = false;\n                }\n\n            } else {\n                const entity = await this.pageRepository.findOneById(deleteNum);\n                if (entity === null) {\n                    result = \"当前分类不存在\";\n                    update = false;\n                } else {\n                    const array: Array<number> = await this.getClassifyIdPage(deleteNum);\n                    const newArray: Array<number> = Array.from(new Set(array));\n                    const artiicles: Array<PageEntity> = await this.repositoryPage\n                        .createQueryBuilder()\n                        .where(\n                            \"\\\"classifyId\\\" in (:id)\",\n                            { id: newArray },\n                        ).getMany();\n                    if (artiicles.length > 0) { result = \"当前分类下有页面,不能删除\"; }\n                    update = false;\n                }\n            }\n        }\n        if (!result) {\n            update = true;\n        }\n\n        return { MessageCodeError: result, Continue: update };\n    }\n}\n"]}
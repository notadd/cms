{"version":3,"sources":["cqrsCms/service/page.service.ts"],"names":[],"mappings":"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","file":"page.service.js","sourcesContent":["import { Component } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { getManager, Repository } from \"typeorm\";\nimport { PageContentEntity } from \"../../entity/page.content.entity\";\nimport { PageEntity } from \"../../entity/page.entity\";\nimport { PageClassifyEntity } from \"../../entity/pageClassify.entity\";\nimport { MessageCodeError } from \"../errorMessage/error.interface\";\nimport { ClassifyService } from \"./classify.service\";\n\n@Component()\nexport class PageService {\n    constructor(\n        @InjectRepository(PageEntity) private readonly repository: Repository<PageEntity>,\n        private readonly classifyService: ClassifyService,\n        @InjectRepository(PageContentEntity) private readonly contentRepository: Repository<PageContentEntity>,\n        @InjectRepository(PageClassifyEntity) private readonly pageRepository: Repository<PageClassifyEntity>,\n    ) {\n    }\n\n    /**\n     * 获取所有页面\n     * @returns {Promise<Array<PageEntity>>}\n     */\n    async getAllPage(limit?: number, page?: number) {\n        const result = await this.repository\n            .createQueryBuilder()\n            .orderBy(\"PageEntity.updateAt\", \"DESC\")\n            .skip(limit * (\n                page - 1\n            ))\n            .take(limit)\n            .getManyAndCount();\n        const str: string = JSON.stringify(result);\n        const num: string = str.substring(str.lastIndexOf(\",\") + 1, str.lastIndexOf(\"]\"));\n        const pageEntitys: Array<PageEntity> = Array.from(\n            JSON.parse(str.substring(str.indexOf(\"[\") + 1, str.lastIndexOf(\",\"))),\n        );\n\n        return { pages: pageEntitys, totalItems: Number(num) };\n    }\n\n    /**\n     * 根据页面名称搜索\n     * @param {string} keywords\n     * @returns {Promise<Array<PageEntity>>}\n     */\n    async serachKeywords(keywords: string, limit?: number, page?: number) {\n        const words = `%${keywords}%`;\n        const result = await this.repository.createQueryBuilder()\n            .where(\"\\\"title\\\"like :title\", { title: words })\n            .orderBy(\"PageEntity.updateAt\", \"DESC\")\n            .skip(limit * (\n                page - 1\n            )).take(limit).getManyAndCount();\n        const str: string = JSON.stringify(result);\n        const num: string = str.substring(str.lastIndexOf(\",\") + 1, str.lastIndexOf(\"]\"));\n        const pageEntitys: Array<PageEntity> = Array.from(JSON.parse(str.substring(str.indexOf(\"[\")\n            + 1, str.lastIndexOf(\",\"))));\n        return { pages: pageEntitys, totalItems: Number(num) };\n    }\n\n    /**\n     * 批量或者单个删除页面\n     * @param {Array<number>} array\n     * @returns {Promise<number>}\n     */\n    async deletePages(array: Array<number>, limit?: number, page?: number) {\n        for (const t in array) {\n            const page: PageEntity = await this.repository.findOneById(array[ t ]);\n            if (page === null) { throw new MessageCodeError(\"delete:page:deleteById\"); }\n            await this.contentRepository.createQueryBuilder()\n                .delete().from(PageContentEntity)\n                .where(\"\\\"parentId\\\"= :parentId\", { parentId: page.id }).execute();\n            this.repository.deleteById(page.id);\n        }\n    }\n\n    /**\n     * 新增页面,别名不能重复\n     * @param {PageEntity} page\n     * @returns {Promise<Array<PageEntity>>}\n     */\n    async createPages(page: PageEntity, contents: Array<PageContentEntity>, limit?: number, pages?: number) {\n        if (page.title === null) { throw new MessageCodeError(\"create:page:missingTitle\"); }\n        if (page.alias === null) { throw new MessageCodeError(\"create:page:missingAlias\"); }\n        const entity: PageClassifyEntity = await this.classifyService.findOneByIdPage(page.classifyId);\n        if (page.classifyId !== null && page.classifyId !== 0 && entity === null) {\n            throw new MessageCodeError(\"page:classify:classifyIdMissing\");\n        }\n        if (entity === null) { throw new MessageCodeError(\"update:classify:updateById\"); }\n        const aliasEntity: Array<PageEntity> = await this.repository.createQueryBuilder().where(\n            \"\\\"alias\\\"= :alias\",\n            { alias: page.alias },\n        ).getMany();\n        if (aliasEntity.length > 0) { throw new MessageCodeError(\"create:classify:aliasRepeat\"); }\n        const id: number = await this.repository.save(page).then(a => {\n            return a.id;\n        });\n        for (const t in contents) {\n            let newContent: PageContentEntity = new PageContentEntity();\n            newContent = contents[ t ];\n            newContent.parentId = id;\n            await this.contentRepository.save(newContent);\n        }\n    }\n\n    /**\n     * 基本校验\n     * @param {string} alias\n     * @param {number} classifyId\n     * @returns {Promise<void>}\n     */\n    async curdCheck(aliasName?: string, classifyId?: number) {\n        let result: string;\n        let update = true;\n        if (aliasName) {\n            const aliasEntity: Array<PageEntity> = await this.repository.createQueryBuilder()\n                .where(\"\\\"alias\\\"= :alias\", { alias: aliasName }).getMany();\n            if (aliasEntity.length > 0) { result = \"别名不能重复\"; }\n            update = false;\n        }\n        if (classifyId) {\n            const entity: PageClassifyEntity = await this.classifyService.findOneByIdPage(classifyId);\n            if (entity === null) { result = \"对应分类不存在\"; }\n            update = false;\n        }\n        if (!result) {\n            update = true;\n        }\n        return { MessageCodeError: result, Continue: update };\n    }\n\n    /**\n     * 修改页面,别名不可重复\n     * @param {PageEntity} page\n     *\n     * @returns {Promise<Array<PageEntity>>}\n     */\n    async updatePages(page: PageEntity, content: Array<PageContentEntity>, limit?: number, pages?: number) {\n        const entityPage: PageEntity = await this.repository.findOneById(page.id);\n        if (entityPage === null) {\n            throw new MessageCodeError(\"delete:page:deleteById\");\n        }\n        const aliasEntity: Array<PageEntity> = await this.repository.createQueryBuilder().where(\n            \"\\\"alias\\\"= :alias\",\n            { alias: page.alias },\n        ).getMany();\n        if (aliasEntity.length > 0) {\n            throw new MessageCodeError(\"create:classify:aliasRepeat\");\n        }\n        const entity: PageClassifyEntity = await this.classifyService.findOneByIdPage(page.classifyId);\n        if (page.classifyId !== null && page.classifyId !== 0 && entity === null) {\n            throw new MessageCodeError(\"page:classify:classifyIdMissing\");\n        }\n        page.updateAt = new Date();\n        for (const t in content) {\n            if (content[ t ].id === 0) {\n                let newContent: PageContentEntity = new PageContentEntity();\n                newContent = content[ t ];\n                newContent.parentId = page.id;\n                await this.contentRepository.insert(newContent);\n            } else {\n                let newContent: PageContentEntity = new PageContentEntity();\n                newContent = content[ t ];\n                newContent.parentId = page.id;\n                newContent.updateAt = new Date();\n                await this.contentRepository.updateById(newContent.id, newContent);\n            }\n        }\n        if (page.alias === undefined || page.alias === null) { page.alias = entityPage.alias; }\n        if (page.title === null || page.title === undefined) { page.title = entityPage.title; }\n        if (page.classifyId === null || page.classifyId === undefined) { page.classifyId = entityPage.classifyId; }\n        if (page.classify === null || page.classify === undefined) { page.classify = entityPage.classify; }\n        try {\n            await this.repository.updateById(entityPage.id, page);\n        } catch (error) {\n            throw new MessageCodeError(\"dataBase:curd:error\");\n        }\n    }\n\n    /**\n     * 根据id查找页面及对应内容\n     * @param {number} id\n     * @returns {Promise<PageEntity>}\n     */\n    async findPageById(id: number): Promise<PageEntity> {\n        return this.repository.findOneById(id, { relations: [ \"contents\" ] });\n    }\n\n    /**\n     * 通过分类id查找页面\n     * @param {number} id\n     * @param {number} limit\n     * @returns {Promise<Array<PageEntity>>}\n     */\n    async findPageByClassifyId(id: number, limit?: number, page?: number) {\n        const entityClassify: PageClassifyEntity = await this.classifyService.findOnePageClassifyById(id);\n        if (entityClassify === null) { throw new MessageCodeError(\"delete:page:deleteById\"); }\n        const array: Array<number> = await this.getClassifyId(id).then(a => {\n            return a;\n        });\n        array.push(id);\n        const newArray: Array<number> = Array.from(new Set(array));\n        const result = await this.repository.createQueryBuilder()\n            .where(\"\\\"classifyId\\\" in (:id)\", { id: newArray })\n            .orderBy(\"PageEntity.updateAt\", \"DESC\").skip(limit * (\n                page - 1\n            )).take(limit).getManyAndCount();\n        const str: string = JSON.stringify(result);\n        const num: string = str.substring(str.lastIndexOf(\",\") + 1, str.lastIndexOf(\"]\"));\n        const pageEntities: Array<PageEntity> = Array.from(JSON.parse(str.substring(str.indexOf(\"[\")\n            + 1, str.lastIndexOf(\",\"))));\n        return { pages: pageEntities, totalItems: Number(num) };\n    }\n\n    /**\n     * 获取子级分类\n     * @param {number} id\n     * @returns {Promise<Array<number>>}\n     */\n    async getClassifyId(idNum: number): Promise<Array<number>> {\n        await getManager().query(\"update public.page_classify_table set \\\"parentId\\\" = \\\"groupId\\\"\");\n        const result = await this.pageRepository.createQueryBuilder(\"page_classify_table\")\n            .where(\"page_classify_table.id= :id\", { id: idNum })\n            .innerJoinAndSelect(\"page_classify_table.children\", \"children\")\n            .orderBy(\"page_classify_table.id\").getMany();\n        const firstArray: Array<PageClassifyEntity> = result;\n        const array: Array<number> = [];\n        for (const t in firstArray) {\n            array.push(firstArray[ t ].id);\n            if (firstArray[ t ].children.length > 0) {\n                for (const h in firstArray[ t ].children) {\n                    array.push(firstArray[ t ].children[ h ].id);\n                    array.push(...await this.getClassifyId(firstArray[ t ].children[ h ].id));\n                }\n            }\n        }\n        return array;\n    }\n}\n"]}
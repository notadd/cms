type Article{
    #文章Id
    id:Int,
    #文章名
    name:String,
    #分类名称
    classify:String,
    #分类Id
    classifyId:Int,
    #文章地址
    url:String,
    #来源
    source:String,
    #来源链接
    sourceUrl:String,
    #置顶
    topPlace:String,
    #是否隐藏
    hidden:Boolean,
    #删除(回收站)
    recycling:Boolean,
    #发布时间
    publishedTime:String,
    #摘要
    abstract:String,
    #内容
    content:String,
    #创建时间
    createAt:String,
    #修改时间
    updateAt:String,
}
enum stick{
    global,
    current,
    level1,
    level2,
    level3
}
input ArticleInput{
    #文章名
    name:String!,
    #分类名称
    classify:String,
    #分类Id
    classifyId:Int,
    #摘要
    abstract:String,
    #内容
    content:String,
    #置顶
    topPlace:stick!,
    #是否隐藏
    hidden:Boolean,
    #发布时间
    publishedTime:String,
    #来源
    source:String,
    #来源链接
    sourceUrl:String,
}
input ArticleUpdate{
    #文章Id
    id:Int!,
    #文章名
    name:String!,
    #分类名称
    classify:String,
    #分类Id
    classifyId:Int,
    #摘要
    abstract:String,
    #内容
    content:String,
    #置顶
    topPlace:stick!,
    #是否隐藏
    hidden:Boolean!,
    #发布时间
    publishedTime:String,
    #来源
    source:String,
    #来源链接
    sourceUrl:String,
}
type Classify{
    #分类Id
    id:Int,
    #分类名称
    classifyName:String,
    #分类别名
    classifyAlias:String,
    #内链
    chainUrl:String,
    #描述
    describe:String,
    #颜色
    color:String,
    #父节点
    groupId:Int,
    #子节点
    childrens:[Classify],
}
input ClassifyCreate{
    #分类名称
    classifyName:String!,
    #分类别名
    classifyAlias:String!,
    #内链
    chainUrl:String,
    #描述
    describe:String,
    #颜色
    color:String,
    #父节点
    groupId:Int,
}
input ClassifyUpdate{
    #分类id
    id:Int,
    #分类名称
    classifyName:String!,
    #分类别名
    classifyAlias:String!,
    #内链
    chainUrl:String,
    #描述
    describe:String,
    #颜色
    color:String,
    #父节点
    groupId:Int,
}
input ContentArray{
    #内容id
    id:Int,
    #页面内容
    content:String
}
type Page{
    #页面id
    id:Int,
    #页面标题
    title:String,
    #页面别名
    alias:String,
    #是否开启
    open:Boolean,
    #页面分类
    classify:Int,
    #内容
    contents:[Content]
}
type Content{
    #内容id
    id:Int,
    #页面id
    parentId:Int,
    #页面内容
    content:String,
}
input ArticleAll{
    limitNum:Int,
    hidden:Boolean
}
input Keywords{
    keywords:String!,
    limitNum:Int
}
input recycleLimit{
    limitNum:Int
}
input recycleClasssifyId{
    id:Int!,
    limitNum:Int
}
input ArticleId{
    id:Int!
}
input AllClassify{
    id:Int,
    useFor:useFor!
}
enum useFor{
    art,
    page
}
type Query {
    getArticles(getArticleAll:ArticleAll,keywordsSerach:Keywords,recycleFind:recycleLimit,reductionGetByClassifyId:recycleClasssifyId,showNext:ArticleId,getArticleByClassifyId:recycleClasssifyId,
        findTopPlace:recycleLimit,getArticleById:ArticleId):[Article],
    getClassifys(getAllClassify:AllClassify,):[Classify],
    getPages(getAllPage:recycleLimit,serachPages:Keywords,getPagesByClassifyId:recycleClasssifyId,findPageById:ArticleId):[Page],
    #Get all the articles by paging and the articles is show.
    getArticleAll(limitNum:Int!,hidden:Boolean):[Article],
    #Get the article by searching for keywords.
    keywordsSerach(keywords:String!,limitNum:Int!):[Article]
    #Get all the categories,But you need to provide'art'or 'page'.
    getAllClassify(useFor:String!,id:Int!):[Classify],
    #Get all pages.
    getAllPage(limitNum:Int!):[Page],
    #Get the page by searching for keywords.
    serachPages(keyWords:String!):[Page],
    #Find all the articles in the recycle bin.
    recycleFind(limitNum:Int!):[Article],
    #Get the  article from  reduction by classify id.
    reductionGetByClassifyId(id:Int!,limitNum:Int!):[Article],
    #show the articles in the next level of the current classification.
    showNext(id:Int!):[Article],
    #Get articles by classifaction id topPlace
    getArticleByClassifyId(id:Int!,limitNum:Int!):[Article],
    #find pages by classification id.
    getPagesByClassifyId(id:Int!,limitNum:Int!):[Page]
    #find a page by id
    findPageById(id:Int!):Page,
    #get top place articles
    findTopPlace(limitNum:Int!):[Article],
    #get articles by id
    getArticleById(id:Int!):Article
}
type Mutation{
    #Delete the article by id, and the article will go to the recycle bin.
    deleteById(id:[Int]):Int,
    #To create the article
    createArticle(createArt:ArticleInput!):String,
    #To update the article
    updateArticle(updateArt:ArticleUpdate!):String,
    #Delete the article in the recycle bin.
    recycleDelete(id:[Int]):Int,
    #Restore the article in the recycle bin.
    reductionArticle(id:[Int],limitNum:Int!):String,
    #To create a classification,and you need to provide'art'or 'page'.
    createClassify(createClass:ClassifyCreate!,useFor:String!):[Classify],
    #To update a classification,and you need to provide'art'or 'page'.
    updateClassify(updateClass:ClassifyUpdate!,useFor:String!):[Classify],
    #To delete a classification,and you need to provide'art'or 'page'.
    deleteClassifyById(id:Int!,useFor:String!):[Classify],
    #mobile the classification
    mobileTheClassify(useFor:String!,id:Int!,parentId:Int!):[Classify]
    #Single or batch delete pages
    deletePages(id:[Int]!):Int,
    #To cerate a page
    createPages(title:String!,alias:String!,content:[String],classify:Int):[Page],
    #To update a page
    updatePages(id:Int!,title:String!,alias:String!,content:[ContentArray],classify:Int):[Page],
}

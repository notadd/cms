type Article{
    #文章Id
    id:Int,
    #文章名
    name:String,
    #分类名称
    classify:String,
    #分类Id
    classifyId:Int,
    #文章地址
    url:String,
    #来源
    source:String,
    #来源链接
    sourceUrl:String,
    #置顶
    topPlace:String,
    #是否隐藏
    hidden:Boolean,
    #删除(回收站)
    recycling:Boolean,
    #发布时间
    publishedTime:String,
    #摘要
    abstract:String,
    #内容
    content:String,
    #创建时间
    createAt:String,
    #修改时间
    updateAt:String,
}
type ArticlePagination{
    #分页
    pagination:ReturnPage,
    #文章列表
    articles:[Article]
}
type ReturnPage{
    #总条数
    totalItems: Int,
    #当前页
    currentPage: Int,
    #当前页内有多少条数据
    pageSize: Int,
    #总页数
    totalPages: Int,
    #开始页
    startPage: Int,
    #结束页
    endPage: Int,
    #开始下标
    startIndex: Int,
    #结束下标
    endIndex: Int,
    #页码列表
    pages: [Int]
}
enum stick{
    #全局
    global,
    #当前
    current,
    #一级分类
    level1,
    #二级分类
    level2,
    #三级分类
    level3
}
input ArticleInput{
    #文章名
    name:String!,
    #分类名称
    classify:String!,
    #分类Id
    classifyId:Int!,
    #摘要
    abstract:String,
    #内容
    content:String,
    #置顶
    topPlace:stick,
    #是否隐藏
    hidden:Boolean!,
    #发布时间
    publishedTime:String,
    #来源
    source:String,
    #来源链接
    sourceUrl:String,
}
input ArticleUpdate{
    #文章Id
    id:Int!,
    #文章名
    name:String,
    #分类名称
    classify:String,
    #分类Id
    classifyId:Int,
    #摘要
    abstract:String,
    #内容
    content:String,
    #置顶
    topPlace:stick,
    #是否隐藏
    hidden:Boolean,
    #发布时间
    publishedTime:String,
    #来源
    source:String,
    #来源链接
    sourceUrl:String,
}
type Classify{
    #分类Id
    id:Int,
    #分类名称
    classifyName:String,
    #分类别名
    classifyAlias:String,
    #内链
    chainUrl:String,
    #描述
    describe:String,
    #颜色
    color:String,
    #父节点
    groupId:Int,
    #子节点
    childrens:[Classify],
}
input ClassifyCreate{
    useFor:useFor
    #分类名称
    classifyName:String!,
    #分类别名
    classifyAlias:String!,
    #内链
    chainUrl:String,
    #描述
    describe:String,
    #颜色
    color:String,
    #父节点
    groupId:Int!,
}
input ClassifyUpdate{
    #分类id
    id:Int,
    #分类名称
    classifyName:String!,
    #分类别名
    classifyAlias:String!,
    #内链
    chainUrl:String,
    #描述
    describe:String,
    #颜色
    color:String,
    #父节点
    groupId:Int,
}
input ContentArray{
    #内容id
    id:Int,
    #页面内容
    content:String
}
type Page{
    #页面id
    id:Int,
    #页面标题
    title:String,
    #页面别名
    alias:String,
    #是否开启
    open:Boolean,
    #页面分类
    classify:String,
    #页面分类Id
    classifyId:Int,
    #创建时间
    createAt:String,
    #修改时间
    updateAt:String,
    #内容
    contents:[Content]
}
type PagePagination{
    pagination:ReturnPage,
    pages:[Page]
}
type Content{
    #内容id
    id:Int,
    #页面id
    parentId:Int,
    #页面内容
    content:String,
}
input ArticleAll{
    #分页
    limitNum:Int,
    #是否隐藏
    hidden:Boolean,
    #第几页
    pages:Int
}
input Keywords{
    #关键字
    keywords:String!,
    #分页
    limitNum:Int
    #第几页
    pages:Int
}
input recycleLimit{
    #分页
    limitNum:Int
    #第几页
    pages:Int
}
input recycleClasssifyId{
    #分类id
    id:Int!,
    #分页
    limitNum:Int,
    #是否显示置顶文章
    show:Boolean
    #第几页
    pages:Int
}
input ArticleId{
    #文章id
    id:Int!
}
input AllClassify{
    #分类id
    id:Int,
    #适用于文章或者页面分类
    useFor:useFor!
}
enum useFor{
    #文章分类
    art,
    #页面分类
    page
}
input Array{
    #id数组
    id:[Int],
    #分页
    limitNum:Int
    #第几页
    pages:Int
}
input ClassifyCreateNew{
    #适用
    useFor:useFor!,
    #创建分类模板
    createClass:ClassifyCreate,
    #分类id
    id:Int
}
input ClassifyUpdateNew{
    #适用
    useFor:useFor!,
    #修改分类模板
    updateClass:ClassifyUpdate,
    #分类id
    id:Int
}
input deleteClassify{
    #适用
    useFor:useFor!,
    #分类id
    id:Int!
}
input mobileClassify{
    #适用
    useFor:useFor!,
    #分类id
    id:Int!,
    #分类父Id
    parentId:Int!
}
input CreatePage{
    #页面名称
    title:String!,
    #页面别名
    alias:String!,
    #页面内容
    content:[String],
    #页面分类名称
    classify:String,
    #页面分类Id
    classifyId:Int!,
    #分页
    limitNum:Int
    #第几页
    pages:Int
}
input UpdatePage{
    #页面id
    id:Int!,
    #页面名称
    title:String,
    #页面别名
    alias:String,
    #页面内容
    content:[ContentArray],
    #页面分类名称
    classify:String,
    #页面分类id
    classifyId:Int,
    #分页
    limitNum:Int
    #第几页
    pages:Int
}
input ArticleIdArray{
    #置顶分类
    id:Int!
    #不显示分类
    display:[Int]
}
input createXml{
    #生成xml地图
    lc_is_Enabled_XML_Sitemap:Boolean,
    #xml文件名
    lc_XML_FileName:Boolean,
    #只包括最近的文章(1000以内)
    lc_post_limit1000:Boolean,
    #当发布文章时更新sitemap
    lc_is_update_sitemap_when_post:Boolean,
    #链接包括：文章
    lc_post_select:Boolean,
    #链接包括：页面
    lc_page_select:Boolean
}
type Query{
    #Get the articles by paging.
    getArticlesLimit(getArticleAll: ArticleAll, keywordsSerach: Keywords, recycleFind: recycleLimit,
        reductionGetByClassifyId: recycleClasssifyId, getArticleByClassifyId: recycleClasssifyId, findTopPlace: recycleLimit) :ArticlePagination,
   #Get the articles No paging.
    getArticlesNoLimit(getArticleById: ArticleId,showNext: ArticleId,superiorArticle:ArticleId,getCurrentClassifyArticles:ArticleId):[Article]
    #Get classification
    getClassifys(getAllClassify: AllClassify) : [Classify],
    #get pages by paging.
    getPagesLimit(getAllPage: recycleLimit, serachPages: Keywords, getPagesByClassifyId: recycleClasssifyId) :PagePagination,
    #get a page by page
    getPageById(findPageById: ArticleId):Page,
    updateFile(upateFile:createXml):String,
    createFile(buildxml:createXml):String
}
type Mutation{
    #the method to modify article,return string
    ArticleCU(createArt:ArticleInput,updateArt:ArticleUpdate,deleteById:Array,recycleDelete:Array,reductionArticle:Array,classifyTopPlace:ArticleIdArray,limitNum:Int
        pages:Int,hidden:Boolean):ArticlePagination
    #the method to modify classification,return classify array
    ClassifyCU(createClass:ClassifyCreateNew,updateClass:ClassifyUpdateNew,deleteClassifyById:deleteClassify,mobileTheClassify:mobileClassify):[Classify]
    #the method to modify page,return page array
    PageCUD(createPages:CreatePage,updatePages:UpdatePage,deletePages:Array):PagePagination,
}
